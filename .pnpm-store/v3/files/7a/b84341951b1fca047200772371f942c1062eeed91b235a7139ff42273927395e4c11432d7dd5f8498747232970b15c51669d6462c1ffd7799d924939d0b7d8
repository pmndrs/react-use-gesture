{"version":3,"file":"core.cjs.production.min.js","sources":["../src/breakpoints.ts","../src/createBox.ts","../src/propGetters.ts","../src/mediaGetters.ts","../src/transform.ts","../src/customProperties.ts","../src/colorModes.tsx"],"sourcesContent":["/* eslint-disable no-undef */\nimport * as React from 'react'\nimport { getBreakpoints, Theme } from '@xstyled/system'\n\nexport function useThemeBreakpoints(theme: Theme) {\n  return getBreakpoints({ theme })\n}\n\n/**\n * Minimum breakpoint width.\n * Null for the smallest breakpoint.\n */\nfunction useThemeMinValue(theme: Theme, key: string | number) {\n  const breakpoints = useThemeBreakpoints(theme)\n  const value = breakpoints[key]\n  return value === 0 ? null : value\n}\n\n/**\n * Maximum breakpoint width. Null for the largest (last) breakpoint.\n * The maximum value is calculated as the minimum of the next one less 0.02px\n * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n * See https://bugs.webkit.org/show_bug.cgi?id=178261\n */\nfunction useThemeMaxValue(theme: Theme, key: string | number) {\n  const breakpoints = useThemeBreakpoints(theme)\n  const breakPoint = breakpoints[key]\n  return breakPoint === 0 ? null : breakPoint - 0.02\n}\n\nexport function useViewportWidth() {\n  const [width, setWidth] = React.useState(\n    typeof window === 'undefined' ? null : window.innerWidth,\n  )\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth)\n    }\n\n    // Add the listener, then setWidth to avoid race.\n    window.addEventListener('resize', handleResize)\n    setWidth(window.innerWidth)\n\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return width\n}\n\nexport function useThemeBreakpoint(theme: Theme) {\n  const breakpoints = useThemeBreakpoints(theme)\n  const width = useViewportWidth()\n  return React.useMemo(() => {\n    return (\n      Object.keys(breakpoints)\n        .reverse()\n        .find(\n          (breakpoint) => width !== null && width > breakpoints[breakpoint],\n        ) || null\n    )\n  }, [breakpoints, width])\n}\n\nexport function useThemeUp(theme: Theme, key: string | number) {\n  const value = useThemeMinValue(theme, key)\n  const width = useViewportWidth()\n  return width !== null && value !== null && width >= value\n}\n\nexport function useThemeDown(theme: Theme, key: string | number) {\n  const value = useThemeMaxValue(theme, key)\n  const width = useViewportWidth()\n  return width !== null && value !== null && width < value\n}\n","import { system } from '@xstyled/system'\n\nexport function createBox() {\n  return [`&&{`, system, `}`]\n}\ncreateBox.meta = system.meta\n","import {\n  getSpace,\n  getColor,\n  getRadius,\n  getBorder,\n  getBorderWidth,\n  getBorderStyle,\n  getShadow,\n  getSize,\n  getZIndex,\n  getFont,\n  getFontSize,\n  getLineHeight,\n  getFontWeight,\n  getLetterSpacing,\n  getTransition,\n  getInset,\n  getAnimation,\n  getTimingFunction,\n  getTransform,\n  getTransitionProperty,\n  getDuration,\n} from '@xstyled/system'\n\nconst getNumber = (transform: Function) => (value: any) => {\n  const num = Number(value)\n  return transform(Number.isNaN(num) ? value : num)\n}\n\nconst SPACES = /\\s+/\nconst getMultiDimensions = (transform: Function) => (value: any) => {\n  const values = value.split(SPACES)\n  return (p: object) =>\n    values.map((value: any) => transform(value)(p)).join(' ')\n}\n\nconst COMMA = /\\s*,\\s*/\nconst getMultiValues = (transform: Function) => (value: any) => {\n  const values = value.split(COMMA)\n  return (p: object) =>\n    values.map((value: any) => transform(value)(p)).join(',')\n}\n\nconst getNumberInset = getNumber(getInset)\n\nconst getNumberSpace = getNumber(getSpace)\nconst getMultiNumberSpace = getMultiDimensions(getNumberSpace)\n\nconst getNumberBorder = getNumber(getBorder)\n\nconst getNumberBorderWidth = getNumber(getBorderWidth)\nconst getMultiNumberBorderWidth = getMultiDimensions(getNumberBorderWidth)\n\nconst getNumberSize = getNumber(getSize)\n\nconst getMultiBorderStyle = getMultiDimensions(getBorderStyle)\n\nexport const propGetters = {\n  // getSpace\n  margin: getMultiNumberSpace,\n  'margin-top': getNumberSpace,\n  'margin-bottom': getNumberSpace,\n  'margin-left': getNumberSpace,\n  'margin-right': getNumberSpace,\n  padding: getMultiNumberSpace,\n  'padding-top': getNumberSpace,\n  'padding-bottom': getNumberSpace,\n  'padding-left': getNumberSpace,\n  'padding-right': getNumberSpace,\n  gap: getMultiNumberSpace,\n  'grid-gap': getMultiNumberSpace,\n  'row-gap': getNumberSpace,\n  'grid-row-gap': getNumberSpace,\n  'column-gap': getNumberSpace,\n  'grid-column-gap': getNumberSpace,\n\n  // getColor\n  color: getColor,\n  'background-color': getColor,\n  'border-color': getColor,\n  'border-top-color': getColor,\n  'border-right-color': getColor,\n  'border-bottom-color': getColor,\n  'border-left-color': getColor,\n  'outline-color': getColor,\n  fill: getColor,\n  stroke: getColor,\n\n  // getRadius\n  'border-radius': getMultiDimensions(getNumber(getRadius)),\n  'border-top-left-radius': getMultiDimensions(getNumber(getRadius)),\n  'border-top-right-radius': getMultiDimensions(getNumber(getRadius)),\n  'border-bottom-right-radius': getMultiDimensions(getNumber(getRadius)),\n  'border-bottom-left-radius': getMultiDimensions(getNumber(getRadius)),\n\n  // getBorder\n  border: getNumberBorder,\n  'border-top': getNumberBorder,\n  'border-right': getNumberBorder,\n  'border-bottom': getNumberBorder,\n  'border-left': getNumberBorder,\n\n  // getBorderWidth\n  'border-width': getMultiNumberBorderWidth,\n  'border-top-width': getNumberBorderWidth,\n  'border-right-width': getNumberBorderWidth,\n  'border-bottom-width': getNumberBorderWidth,\n  'border-left-width': getNumberBorderWidth,\n  'outline-width': getNumberBorderWidth,\n\n  // getBorderStyle\n  'border-style': getMultiBorderStyle,\n  'border-top-style': getBorderStyle,\n  'border-right-style': getBorderStyle,\n  'border-bottom-style': getBorderStyle,\n  'border-left-style': getBorderStyle,\n  'outline-style': getBorderStyle,\n\n  // getShadow\n  'box-shadow': getMultiValues(getShadow),\n  'text-shadow': getMultiValues(getShadow),\n\n  // getSize\n  width: getNumberSize,\n  height: getNumberSize,\n  'max-width': getNumberSize,\n  'max-height': getNumberSize,\n  'min-width': getNumberSize,\n  'min-height': getNumberSize,\n  'mask-size': getMultiValues(getNumberSize),\n\n  // getZIndex\n  'z-index': getNumber(getZIndex),\n\n  // getFont\n  'font-family': getFont,\n\n  // getFontSize\n  'font-size': getNumber(getFontSize),\n\n  // getLineHeight\n  'line-height': getNumber(getLineHeight),\n\n  // getFontWeight\n  'font-weight': getFontWeight,\n\n  // getLetterSpacing\n  'letter-spacing': getNumber(getLetterSpacing),\n\n  // getTransition\n  transition: getTransition,\n\n  // getDuration\n  'transition-duration': getDuration,\n  'animation-duration': getDuration,\n\n  // getAnimation\n  animation: getAnimation,\n\n  // getInset\n  top: getNumberInset,\n  right: getNumberInset,\n  bottom: getNumberInset,\n  left: getNumberInset,\n\n  // getTimingFunction\n  'animation-timing-function': getTimingFunction,\n  'transition-timing-function': getTimingFunction,\n\n  // getTransform\n  transform: getTransform,\n\n  // getTransitionProperty\n  'transition-property': getTransitionProperty,\n}\n","import {\n  getBreakpoints,\n  getBreakpointMin,\n  getBreakpointMax,\n} from '@xstyled/system'\n\nconst getMediaWidth = (getBreakpointBound: Function) => (value: any) => (\n  props: object,\n) => {\n  const v = getBreakpointBound(getBreakpoints(props), value)\n  // getters return null for smallest, undefined for not found, and otherwise\n  // a px string. Since we MUST emit a matcher at this point, use 0px for the\n  // smallest case (always true for min, never true for max).\n  return v === null ? '0' : v || value\n}\n\nexport const mediaGetters = {\n  'min-width': getMediaWidth(getBreakpointMin),\n  'max-width': getMediaWidth(getBreakpointMax),\n}\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport { mediaGetters } from './mediaGetters'\nimport { propGetters } from './propGetters'\n\n// prop name is an ident: word chars, underscore and dash.\nconst PROP_CHAR = `[-\\\\w]`\n\n// prop value consists of non-semis and no curly braces unless backslash-escaped.\n// This uses [\\s\\S] instead of . because IE11 doesn't support the s flag.\nconst VALUE_CHAR = `(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\;{}])`\n\n// prettier-ignore\nconst PROP_PATT = (\n  `(${PROP_CHAR}+)` +   // capture prop name\n  `(\\\\s*:\\\\s*)` +       // colon & whitespace\n  `(?=\\\\S)` +           // prop value starts with non-whitespace\n  `(${VALUE_CHAR}*?)` + // capture prop value (non-greedy)\n  `(\\\\s*!important)?` + // capture !important\n  `(\\\\s*;)`             // semi & whitespace\n)\n\n// simplistic but workable media query value.\nconst MEDIA_CHAR = `[^{]`\n\n// prettier-ignore\nconst MEDIA_PATT = (\n  `(@media\\\\b\\\\s*)` +   // start of media query\n  `(?=\\\\S)` +           // value starts with non-whitespace\n  `(${MEDIA_CHAR}+?)` + // capture queries (non-greedy)\n  `(\\\\s*\\\\{)`           // brace & whitespace\n)\n\nconst MATCH_REGEXP = new RegExp(`(?:${PROP_PATT}|${MEDIA_PATT})`, `g`)\n\nexport function transform(rawValue: any) {\n  if (typeof rawValue !== 'string') return rawValue\n  let matches\n  let lastIndex = 0\n  const values = []\n  while ((matches = MATCH_REGEXP.exec(rawValue))) {\n    const [, prop, colon, value, imp, semi, media, query, brace] = matches\n    if (media) {\n      values.push(rawValue.slice(lastIndex, matches.index))\n      values.push(media)\n      mediaTransform(query).forEach((v) => values.push(v))\n      values.push(brace)\n      lastIndex = matches.index + matches[0].length\n    } else {\n      const getter = (propGetters as any)[prop]\n      if (getter) {\n        values.push(rawValue.slice(lastIndex, matches.index))\n        values.push(\n          (p: object) =>\n            `${prop}${colon}${getter(value)(p)}${imp || ''}${semi}`,\n        )\n        lastIndex = matches.index + matches[0].length\n      }\n    }\n  }\n  values.push(rawValue.slice(lastIndex, rawValue.length))\n  return values\n}\n\n// media query prop/value pairs such as (min-width: 1024px)\n// prettier-ignore\nconst QUERY_REGEXP = new RegExp(\n  `(\\\\(\\\\s*)` +       // open paren, whitespace\n  `(${PROP_CHAR}+)` + // capture prop name\n  `(\\\\s*:\\\\s*)` +     // colon & whitespace\n  `([^\\\\)]*?)` +      // capture prop value (non-greedy)\n  `(\\\\s*\\\\))`,        // close paren, whitespace\n  `g`\n)\n\nfunction mediaTransform(rawValue: string) {\n  let matches\n  let lastIndex = 0\n  const values = []\n  while ((matches = QUERY_REGEXP.exec(rawValue))) {\n    const [, open, prop, colon, value, close] = matches\n    const getter = (mediaGetters as any)[prop]\n    if (getter) {\n      values.push(rawValue.slice(lastIndex, matches.index))\n      values.push(\n        (p: object) => `${open}${prop}${colon}${getter(value)(p)}${close}`,\n      )\n      lastIndex = matches.index + matches[0].length\n    }\n  }\n  values.push(rawValue.slice(lastIndex, rawValue.length))\n  return values\n}\n","import { obj, string, func, cascade } from '@xstyled/util'\n\nconst join = (...args: (string | undefined)[]): string =>\n  args.filter(Boolean).join('.')\n\nconst toVarName = (key: string): string => `--${key.replace(/\\./g, '-')}`\nconst toVarValue = (key: string, value: string): string =>\n  `var(${toVarName(key)}, ${value})`\nconst toProp = (key: string, value: string): string => `${key}: ${value};`\n\nexport function toCustomPropertiesReferences<\n  T extends Record<string | number, unknown>\n>(\n  values: T,\n  theme?: object,\n  keys: string[] = Object.keys(values),\n  parent?: string,\n): Record<string | number, unknown> {\n  const next: Record<string | number, unknown> = Array.isArray(values)\n    ? ([] as Record<number, string>)\n    : ({} as Record<string, string>)\n\n  for (const i in keys) {\n    const key = keys[i]\n    const value = values[key]\n    const name = join(parent, key)\n    if (obj(value)) {\n      next[key] = toCustomPropertiesReferences(\n        value as { [key: string]: unknown },\n        theme,\n        Object.keys(value),\n        name,\n      )\n      continue\n    }\n    if (string(value)) {\n      next[key] = toVarValue(name, value)\n      continue\n    }\n    if (func(value)) {\n      next[key] = toVarValue(name, cascade(value, { theme }))\n      continue\n    }\n  }\n\n  return next\n}\n\nexport function toCustomPropertiesDeclarations(\n  values: { [key: string]: unknown },\n  theme?: object,\n  keys: string[] = Object.keys(values),\n  parent?: string,\n  state = { value: '' },\n): string {\n  for (const i in keys) {\n    const key = keys[i]\n    const value = values[key]\n    const name = join(parent, key)\n    if (obj(value)) {\n      toCustomPropertiesDeclarations(\n        value as { [key: string]: unknown },\n        theme,\n        Object.keys(value),\n        name,\n        state,\n      )\n      continue\n    }\n    if (string(value)) {\n      state.value += toProp(toVarName(name), value)\n      continue\n    }\n    if (func(value)) {\n      state.value += toProp(toVarName(name), cascade(value, { theme }))\n      continue\n    }\n  }\n\n  return state.value\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable react/no-danger */\n/* eslint-env browser */\nimport * as React from 'react'\nimport {\n  toCustomPropertiesDeclarations,\n  toCustomPropertiesReferences,\n} from './customProperties'\n\ntype ColorModeState = [string | null, (mode: string | null) => void]\ntype Color = string | ((props: Record<string, unknown>) => Color)\ntype Colors = Record<string, Color>\n\ninterface ITheme {\n  useCustomProperties?: boolean\n  useColorSchemeMediaQuery?: boolean\n  initialColorModeName?: string\n  defaultColorModeName?: string\n  colors?: Colors & {\n    modes?: Record<string, Colors>\n  }\n}\n\ninterface IColorModeTheme extends ITheme {\n  colors: Colors & { modes: Record<string, Colors> }\n}\n\nconst STORAGE_KEY = 'xstyled-color-mode'\n\nconst isLocalStorageAvailable: boolean =\n  typeof window !== 'undefined' &&\n  (() => {\n    try {\n      const key = 'xstyled-test-key'\n      window.localStorage.setItem(key, key)\n      window.localStorage.removeItem(key)\n      return true\n    } catch (err) {\n      return false\n    }\n  })()\n\ninterface Storage {\n  get(): string | null\n  set(value: string): void\n  clear(): void\n}\n\nconst storage: Storage = isLocalStorageAvailable\n  ? {\n      get: () => window.localStorage.getItem(STORAGE_KEY),\n      set: (value: string) => {\n        window.localStorage.setItem(STORAGE_KEY, value)\n      },\n      clear: () => window.localStorage.removeItem(STORAGE_KEY),\n    }\n  : {\n      get: () => null,\n      set: () => {},\n      clear: () => {},\n    }\n\nconst COLOR_MODE_CLASS_PREFIX = 'xstyled-color-mode-'\nconst getColorModeClassName = (mode: string) =>\n  `${COLOR_MODE_CLASS_PREFIX}${mode}`\n\nconst XSTYLED_COLORS_PREFIX = 'xstyled-colors'\nconst SYSTEM_MODES = ['light', 'dark']\n\nfunction getModeTheme(theme: IColorModeTheme, mode: string): IColorModeTheme {\n  return {\n    ...theme,\n    colors: { ...theme.colors, ...theme.colors.modes[mode] },\n  }\n}\n\nconst getMediaQuery = (query: string): string => `@media ${query}`\nconst getColorModeQuery = (mode: string): string =>\n  `(prefers-color-scheme: ${mode})`\n\nfunction checkHasColorModes(theme: ITheme | null): theme is IColorModeTheme {\n  return Boolean(theme && theme.colors && theme.colors.modes)\n}\n\nfunction checkHasCustomPropertiesEnabled(theme: ITheme | null): boolean {\n  return Boolean(\n    theme &&\n      (theme.useCustomProperties === undefined || theme.useCustomProperties),\n  )\n}\n\nfunction checkHasMediaQueryEnabled(theme: ITheme | null): boolean {\n  return Boolean(\n    theme &&\n      (theme.useColorSchemeMediaQuery === undefined ||\n        theme.useColorSchemeMediaQuery),\n  )\n}\n\nfunction getInitialColorModeName(theme: ITheme): string {\n  return theme.initialColorModeName || 'default'\n}\n\nfunction getDefaultColorModeName(theme: ITheme): string {\n  return theme.defaultColorModeName || getInitialColorModeName(theme)\n}\n\nfunction getUsedColorKeys(modes: Record<string, Record<string, Color>>) {\n  let keys: string[] = []\n  for (const key in modes) {\n    keys = [...keys, ...Object.keys(modes[key])]\n  }\n  return keys\n}\n\nexport function createColorStyles(\n  theme: ITheme,\n  { targetSelector = 'body' } = {},\n): string | null {\n  if (!checkHasColorModes(theme)) return null\n\n  const { modes, ...colors } = theme.colors\n  const colorKeys = getUsedColorKeys(modes)\n\n  let styles = toCustomPropertiesDeclarations(\n    colors,\n    theme,\n    colorKeys,\n    XSTYLED_COLORS_PREFIX,\n  )\n\n  function getModePropertiesDeclarations(mode: string) {\n    const modeTheme = getModeTheme(theme as IColorModeTheme, mode)\n    const { modes, ...colors } = modeTheme.colors\n    return toCustomPropertiesDeclarations(\n      { ...colors, ...modes[mode] },\n      modeTheme,\n      colorKeys,\n      XSTYLED_COLORS_PREFIX,\n    )\n  }\n\n  if (theme.useColorSchemeMediaQuery !== false) {\n    SYSTEM_MODES.forEach((mode) => {\n      if (modes[mode]) {\n        const mediaQuery = getMediaQuery(getColorModeQuery(mode))\n        styles += `${mediaQuery}{${getModePropertiesDeclarations(mode)}}`\n      }\n    })\n  }\n\n  const initialModeName = getInitialColorModeName(theme)\n  ;[initialModeName, ...Object.keys(modes)].forEach((mode) => {\n    const key = `&.${getColorModeClassName(mode)}`\n    styles += `${key}{${getModePropertiesDeclarations(mode)}}`\n  })\n\n  return `${targetSelector}{${styles}}`\n}\n\nfunction getSystemModeMql(mode: string) {\n  if (typeof window === 'undefined' || window.matchMedia === undefined) {\n    return null\n  }\n  const query = getColorModeQuery(mode)\n  return window.matchMedia(query)\n}\n\nfunction useSystemMode(theme: ITheme) {\n  const configs: { mode: string; mql: MediaQueryList }[] = React.useMemo(() => {\n    if (!checkHasMediaQueryEnabled(theme)) return []\n    return SYSTEM_MODES.map((mode) => {\n      if (!checkHasColorModes(theme)) return null\n      if (!theme.colors.modes[mode]) return null\n      const mql = getSystemModeMql(mode)\n      return mql ? { mode, mql } : null\n    }).filter(Boolean) as { mode: string; mql: MediaQueryList }[]\n  }, [theme])\n\n  const [systemMode, setSystemMode] = React.useState(() => {\n    const config = configs.find((config) => config.mql.matches)\n    return config ? config.mode : null\n  })\n\n  React.useEffect(() => {\n    const cleans = configs.map(({ mode, mql }) => {\n      const handler = ({ matches }: MediaQueryListEvent) => {\n        if (matches) {\n          setSystemMode(mode)\n        } else {\n          setSystemMode((previousMode) => (previousMode === mode ? null : mode))\n        }\n      }\n      mql.addEventListener('change', handler)\n      return () => mql.removeEventListener('change', handler)\n    })\n    return () => cleans.forEach((clean) => clean())\n  })\n\n  return systemMode\n}\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useColorModeState(\n  theme: ITheme,\n  { target }: { target?: Element } = {},\n): ColorModeState {\n  const systemMode = useSystemMode(theme)\n  const defaultColorMode = getDefaultColorModeName(theme)\n  const initialColorMode = getInitialColorModeName(theme)\n  const [mode, setMode] = React.useState(() => {\n    if (!checkHasColorModes(theme)) return null\n    return defaultColorMode\n  })\n\n  // Add mode className\n  const customPropertiesEnabled = checkHasCustomPropertiesEnabled(theme)\n\n  const manualSetRef = React.useRef(false)\n  const manuallySetMode = React.useCallback((value) => {\n    manualSetRef.current = true\n    setMode(value)\n  }, [])\n\n  // Set initial color mode in lazy\n  useIsomorphicLayoutEffect(() => {\n    if (!checkHasColorModes(theme)) return\n    const storedMode = storage.get()\n    const initialMode = storedMode || systemMode || defaultColorMode\n    if (mode !== initialMode) {\n      setMode(storedMode || systemMode || defaultColorMode)\n    }\n  }, [])\n\n  // Store mode preference\n  useIsomorphicLayoutEffect(() => {\n    if (manualSetRef.current) {\n      if (mode) {\n        storage.set(mode)\n      } else {\n        storage.clear()\n      }\n    }\n  }, [mode])\n\n  // Sync system mode\n  useIsomorphicLayoutEffect(() => {\n    const storedMode = storage.get()\n    if (storedMode) return\n    const targetMode = systemMode || defaultColorMode\n    if (targetMode === mode) return\n    setMode(targetMode)\n  }, [mode, systemMode, defaultColorMode])\n\n  // Add and remove class names\n  useIsomorphicLayoutEffect(() => {\n    if (!mode) return undefined\n    if (!customPropertiesEnabled) return undefined\n    const stored = storage.get()\n    const initial = initialColorMode !== mode\n    if (!stored && !initial) return undefined\n    const className = getColorModeClassName(mode)\n    const usedTarget = target || document.body\n    usedTarget.classList.add(className)\n    return () => {\n      usedTarget.classList.remove(className)\n    }\n  }, [customPropertiesEnabled, target, mode, initialColorMode])\n\n  return [mode, manuallySetMode]\n}\n\nexport function useColorModeTheme(\n  theme: ITheme,\n  mode: string | null,\n): ITheme | null {\n  const [initialMode] = React.useState(mode)\n  const customPropertiesTheme = React.useMemo(() => {\n    if (!initialMode) return null\n    if (!checkHasCustomPropertiesEnabled(theme)) return null\n    if (!checkHasColorModes(theme)) return theme\n    const { modes, ...colors } = theme.colors\n    const colorKeys = getUsedColorKeys(modes)\n\n    return {\n      ...theme,\n      colors: {\n        ...colors,\n        ...toCustomPropertiesReferences(\n          colors,\n          theme,\n          colorKeys,\n          XSTYLED_COLORS_PREFIX,\n        ),\n        modes,\n      },\n      __rawColors: theme.colors,\n    }\n  }, [initialMode, theme])\n\n  const swapModeTheme = React.useMemo(() => {\n    if (!mode) return null\n    if (checkHasCustomPropertiesEnabled(theme)) return null\n    if (!checkHasColorModes(theme)) return theme\n\n    if (mode === getInitialColorModeName(theme)) {\n      return { ...theme, __colorMode: mode }\n    }\n\n    return {\n      ...theme,\n      colors: {\n        ...theme.colors,\n        ...theme.colors.modes[mode],\n      },\n      __colorMode: mode,\n      __rawColors: theme.colors,\n    }\n  }, [theme, mode])\n\n  return (customPropertiesTheme || swapModeTheme) as ITheme\n}\n\nexport const ColorModeContext = React.createContext<ColorModeState | null>(null)\n\nexport function useColorMode(): ColorModeState {\n  const colorModeState = React.useContext(ColorModeContext)\n\n  if (!colorModeState) {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`)\n  }\n\n  return colorModeState\n}\n\nexport interface ColorModeProviderProps {\n  children: React.ReactNode\n  target?: Element\n  targetSelector?: string\n}\n\nexport function createColorModeProvider({\n  ThemeContext,\n  ThemeProvider,\n  ColorModeStyle,\n}: {\n  ThemeContext: React.Context<any>\n  ThemeProvider: React.ComponentType<any>\n  ColorModeStyle: React.ComponentType<any>\n}): React.FC<ColorModeProviderProps> {\n  function ColorModeProvider({\n    children,\n    target,\n    targetSelector,\n  }: ColorModeProviderProps) {\n    const theme = React.useContext(ThemeContext)\n    if (!theme) {\n      throw new Error(\n        '[ColorModeProvider] requires ThemeProvider upper in the tree',\n      )\n    }\n    const colorState = useColorModeState(theme, { target })\n    const colorModeTheme = useColorModeTheme(theme, colorState[0])\n    return (\n      <>\n        <ColorModeStyle targetSelector={targetSelector} />\n        <ThemeProvider theme={colorModeTheme}>\n          <ColorModeContext.Provider value={colorState}>\n            {children}\n          </ColorModeContext.Provider>\n        </ThemeProvider>\n      </>\n    )\n  }\n  return ColorModeProvider\n}\n\ninterface GetInitScriptOptions {\n  target?: string\n}\n\nfunction getInitScript({\n  target = 'document.body',\n}: GetInitScriptOptions = {}) {\n  return `(function() { try {\n    var mode = localStorage.getItem('${STORAGE_KEY}');\n    if (mode) ${target}.classList.add('${COLOR_MODE_CLASS_PREFIX}' + mode);\n  } catch (e) {} })();`\n}\n\nexport function getColorModeInitScriptElement(\n  options?: GetInitScriptOptions,\n): JSX.Element {\n  return (\n    <script\n      key=\"xstyled-color-mode-init\"\n      dangerouslySetInnerHTML={{ __html: getInitScript(options) }}\n    />\n  )\n}\n\nexport function getColorModeInitScriptTag(\n  options?: GetInitScriptOptions,\n): string {\n  return `<script>${getInitScript(options)}</script>`\n}\n"],"names":["useThemeBreakpoints","theme","getBreakpoints","useViewportWidth","React","window","innerWidth","width","setWidth","handleResize","addEventListener","removeEventListener","createBox","system","meta","getNumber","transform","value","num","Number","isNaN","SPACES","getMultiDimensions","values","split","p","map","join","COMMA","getMultiValues","getNumberInset","getInset","getNumberSpace","getSpace","getMultiNumberSpace","getNumberBorder","getBorder","getNumberBorderWidth","getBorderWidth","getMultiNumberBorderWidth","getNumberSize","getSize","getMultiBorderStyle","getBorderStyle","propGetters","margin","padding","gap","color","getColor","fill","stroke","getRadius","border","getShadow","height","getZIndex","getFont","getFontSize","getLineHeight","getFontWeight","getLetterSpacing","transition","getTransition","getDuration","animation","getAnimation","top","right","bottom","left","getTimingFunction","getTransform","getTransitionProperty","getMediaWidth","getBreakpointBound","props","v","mediaGetters","getBreakpointMin","getBreakpointMax","MATCH_REGEXP","RegExp","QUERY_REGEXP","args","filter","Boolean","toVarName","key","replace","toVarValue","toProp","toCustomPropertiesReferences","keys","parent","Object","next","Array","isArray","i","name","obj","string","func","cascade","toCustomPropertiesDeclarations","state","STORAGE_KEY","storage","localStorage","setItem","removeItem","err","get","getItem","set","clear","getColorModeClassName","mode","SYSTEM_MODES","getColorModeQuery","checkHasColorModes","colors","modes","checkHasCustomPropertiesEnabled","undefined","useCustomProperties","getInitialColorModeName","initialColorModeName","getUsedColorKeys","useIsomorphicLayoutEffect","useColorModeState","target","systemMode","configs","useColorSchemeMediaQuery","checkHasMediaQueryEnabled","mql","matchMedia","query","getSystemModeMql","config","find","matches","setSystemMode","cleans","handler","previousMode","forEach","clean","useSystemMode","defaultColorMode","defaultColorModeName","getDefaultColorModeName","initialColorMode","setMode","customPropertiesEnabled","manualSetRef","manuallySetMode","current","storedMode","targetMode","className","usedTarget","document","body","classList","add","remove","useColorModeTheme","initialMode","customPropertiesTheme","colorKeys","__rawColors","swapModeTheme","__colorMode","ColorModeContext","getInitScript","ThemeContext","ThemeProvider","ColorModeStyle","children","targetSelector","Error","colorState","colorModeTheme","Provider","styles","getModePropertiesDeclarations","modeTheme","getModeTheme","mediaQuery","options","dangerouslySetInnerHTML","__html","rawValue","lastIndex","prop","colon","imp","semi","media","brace","push","slice","index","open","close","getter","length","exec","mediaTransform","colorModeState","breakpoints","reverse","breakpoint","breakPoint","useThemeMaxValue","useThemeMinValue"],"mappings":"4JAIgBA,EAAoBC,UAC3BC,iBAAe,CAAED,MAAAA,aA2BVE,UACYC,WACN,oBAAXC,OAAyB,KAAOA,OAAOC,YADzCC,OAAOC,cAIdJ,aAAgB,oBACLK,IACPD,EAASH,OAAOC,mBAIlBD,OAAOK,iBAAiB,SAAUD,GAClCD,EAASH,OAAOC,YAET,kBAAMD,OAAOM,oBAAoB,SAAUF,MACjD,IAEIF,WC/COK,UACP,OAAQC,cAEjBD,EAAUE,KAAOD,SAAOC,KCmBxB,IAAMC,EAAY,SAACC,UAAwB,SAACC,OACpCC,EAAMC,OAAOF,UACZD,EAAUG,OAAOC,MAAMF,GAAOD,EAAQC,KAGzCG,EAAS,MACTC,EAAqB,SAACN,UAAwB,SAACC,OAC7CM,EAASN,EAAMO,MAAMH,UACpB,SAACI,UACNF,EAAOG,KAAI,SAACT,UAAeD,EAAUC,EAAVD,CAAiBS,MAAIE,KAAK,QAGnDC,EAAQ,UACRC,EAAiB,SAACb,UAAwB,SAACC,OACzCM,EAASN,EAAMO,MAAMI,UACpB,SAACH,UACNF,EAAOG,KAAI,SAACT,UAAeD,EAAUC,EAAVD,CAAiBS,MAAIE,KAAK,QAGnDG,EAAiBf,EAAUgB,YAE3BC,EAAiBjB,EAAUkB,YAC3BC,EAAsBZ,EAAmBU,GAEzCG,EAAkBpB,EAAUqB,aAE5BC,EAAuBtB,EAAUuB,kBACjCC,EAA4BjB,EAAmBe,GAE/CG,EAAgBzB,EAAU0B,WAE1BC,EAAsBpB,EAAmBqB,kBAElCC,EAAc,CAEzBC,OAAQX,eACMF,kBACGA,gBACFA,iBACCA,EAChBc,QAASZ,gBACMF,mBACGA,iBACFA,kBACCA,EACjBe,IAAKb,aACOA,YACDF,iBACKA,eACFA,oBACKA,EAGnBgB,MAAOC,8BACaA,0BACJA,8BACIA,gCACEA,iCACCA,+BACFA,2BACJA,WACjBC,KAAMD,WACNE,OAAQF,2BAGS3B,EAAmBP,EAAUqC,uCACpB9B,EAAmBP,EAAUqC,wCAC5B9B,EAAmBP,EAAUqC,2CAC1B9B,EAAmBP,EAAUqC,0CAC9B9B,EAAmBP,EAAUqC,cAG1DC,OAAQlB,eACMA,iBACEA,kBACCA,gBACFA,iBAGCI,qBACIF,uBACEA,wBACCA,sBACFA,kBACJA,iBAGDK,qBACIC,sCACEA,uCACCA,qCACFA,iCACJA,8BAGHd,EAAeyB,2BACdzB,EAAeyB,aAG9B/C,MAAOiC,EACPe,OAAQf,cACKA,eACCA,cACDA,eACCA,cACDX,EAAeW,aAGjBzB,EAAUyC,2BAGNC,sBAGF1C,EAAU2C,6BAGR3C,EAAU4C,+BAGVC,iCAGG7C,EAAU8C,oBAG5BC,WAAYC,sCAGWC,mCACDA,cAGtBC,UAAWC,eAGXC,IAAKrC,EACLsC,MAAOtC,EACPuC,OAAQvC,EACRwC,KAAMxC,8BAGuByC,iDACCA,oBAG9BvD,UAAWwD,qCAGYC,yBCvKnBC,EAAgB,SAACC,UAAiC,SAAC1D,UAAe,SACtE2D,OAEMC,EAAIF,EAAmBzE,iBAAe0E,GAAQ3D,UAIvC,OAAN4D,EAAa,IAAMA,GAAK5D,KAGpB6D,EAAe,aACbJ,EAAcK,gCACdL,EAAcM,qBCcvBC,EAAe,IAAIC,6IAiCnBC,EAAe,IAAID,OACvB,mDADmB,wVC/DrB,IAAMvD,EAAO,sCAAIyD,2BAAAA,yBACfA,EAAKC,OAAOC,SAAS3D,KAAK,MAEtB4D,EAAY,SAACC,cAA6BA,EAAIC,QAAQ,MAAO,MAC7DC,EAAa,SAACF,EAAavE,gBACxBsE,EAAUC,QAASvE,OACtB0E,EAAS,SAACH,EAAavE,UAA6BuE,OAAQvE,OAElE,SAAgB2E,EAGdrE,EACAtB,EACA4F,EACAC,YADAD,IAAAA,EAAiBE,OAAOF,KAAKtE,QAGvByE,EAAyCC,MAAMC,QAAQ3E,GACxD,GACA,OAEA,IAAM4E,KAAKN,EAAM,KACdL,EAAMK,EAAKM,GACXlF,EAAQM,EAAOiE,GACfY,EAAOzE,EAAKmE,EAAQN,GACtBa,MAAIpF,GACN+E,EAAKR,GAAOI,EACV3E,EACAhB,EACA8F,OAAOF,KAAK5E,GACZmF,GAIAE,SAAOrF,GACT+E,EAAKR,GAAOE,EAAWU,EAAMnF,GAG3BsF,OAAKtF,KACP+E,EAAKR,GAAOE,EAAWU,EAAMI,UAAQvF,EAAO,CAAEhB,MAAAA,aAK3C+F,WAGOS,EACdlF,EACAtB,EACA4F,EACAC,EACAY,OAEK,IAAMP,cAJXN,IAAAA,EAAiBE,OAAOF,KAAKtE,aAE7BmF,IAAAA,EAAQ,CAAEzF,MAAO,KAED4E,EAAM,KACdL,EAAMK,EAAKM,GACXlF,EAAQM,EAAOiE,GACfY,EAAOzE,EAAKmE,EAAQN,GACtBa,MAAIpF,GACNwF,EACExF,EACAhB,EACA8F,OAAOF,KAAK5E,GACZmF,EACAM,GAIAJ,SAAOrF,GACTyF,EAAMzF,OAAS0E,EAAOJ,EAAUa,GAAOnF,GAGrCsF,OAAKtF,KACPyF,EAAMzF,OAAS0E,EAAOJ,EAAUa,GAAOI,UAAQvF,EAAO,CAAEhB,MAAAA,aAKrDyG,EAAMzF,MCpDf,IAAM0F,EAAc,qBAqBdC,EAlBc,oBAAXvG,QACN,mBAESmF,EAAM,0BACZnF,OAAOwG,aAAaC,QAAQtB,EAAKA,GACjCnF,OAAOwG,aAAaE,WAAWvB,IACxB,EACP,MAAOwB,UACA,GAPV,GAkBC,CACEC,IAAK,kBAAM5G,OAAOwG,aAAaK,QAAQP,IACvCQ,IAAK,SAAClG,GACJZ,OAAOwG,aAAaC,QAAQH,EAAa1F,IAE3CmG,MAAO,kBAAM/G,OAAOwG,aAAaE,WAAWJ,KAE9C,CACEM,IAAK,kBAAM,MACXE,IAAK,aACLC,MAAO,cAIPC,EAAwB,SAACC,SADC,sBAEDA,GAGzBC,EAAe,CAAC,QAAS,QAUzBC,EAAoB,SAACF,mCACCA,OAE5B,SAASG,EAAmBxH,UACnBqF,QAAQrF,GAASA,EAAMyH,QAAUzH,EAAMyH,OAAOC,OAGvD,SAASC,EAAgC3H,UAChCqF,QACLrF,SACiC4H,IAA9B5H,EAAM6H,qBAAqC7H,EAAM6H,sBAYxD,SAASC,EAAwB9H,UACxBA,EAAM+H,sBAAwB,UAOvC,SAASC,EAAiBN,OACpB9B,EAAiB,OAChB,IAAML,KAAOmC,EAChB9B,YAAWA,EAASE,OAAOF,KAAK8B,EAAMnC,YAEjCK,EA0FT,IAAMqC,EACc,oBAAX7H,OAAyBD,kBAAwBA,qBAE1C+H,EACdlI,SACEmI,cAAiC,MAAjCA,OAEIC,EAzCR,SAAuBpI,OACfqI,EAAmDlI,WAAc,kBA9EzE,SAAmCH,UAC1BqF,QACLrF,SACsC4H,IAAnC5H,EAAMsI,0BACLtI,EAAMsI,2BA2ELC,CAA0BvI,GACxBsH,EAAa7F,KAAI,SAAC4F,OAClBG,EAAmBxH,GAAQ,OAAO,SAClCA,EAAMyH,OAAOC,MAAML,GAAO,OAAO,SAChCmB,EAdZ,SAA0BnB,MACF,oBAAXjH,aAAgDwH,IAAtBxH,OAAOqI,kBACnC,SAEHC,EAAQnB,EAAkBF,UACzBjH,OAAOqI,WAAWC,GASTC,CAAiBtB,UACtBmB,EAAM,CAAEnB,KAAAA,EAAMmB,IAAAA,GAAQ,QAC5BpD,OAAOC,SANoC,KAO7C,CAACrF,MAEgCG,YAAe,eAC3CyI,EAASP,EAAQQ,MAAK,SAACD,UAAWA,EAAOJ,IAAIM,kBAC5CF,EAASA,EAAOvB,KAAO,QAFzBe,OAAYW,cAKnB5I,aAAgB,eACR6I,EAASX,EAAQ5G,KAAI,gBAAG4F,IAAAA,KAAMmB,IAAAA,IAC5BS,EAAU,YAEZF,IAFeD,QAEDzB,EAEA,SAAC6B,UAAkBA,IAAiB7B,EAAO,KAAOA,YAGpEmB,EAAI/H,iBAAiB,SAAUwI,GACxB,kBAAMT,EAAI9H,oBAAoB,SAAUuI,cAE1C,kBAAMD,EAAOG,SAAQ,SAACC,UAAUA,WAGlChB,EAUYiB,CAAcrJ,GAC3BsJ,EA3GR,SAAiCtJ,UACxBA,EAAMuJ,sBAAwBzB,EAAwB9H,GA0GpCwJ,CAAwBxJ,GAC3CyJ,EAAmB3B,EAAwB9H,KACzBG,YAAe,kBAChCqH,EAAmBxH,GACjBsJ,EADgC,QADlCjC,OAAMqC,OAMPC,EAA0BhC,EAAgC3H,GAE1D4J,EAAezJ,UAAa,GAC5B0J,EAAkB1J,eAAkB,SAACa,GACzC4I,EAAaE,SAAU,EACvBJ,EAAQ1I,KACP,WAGHiH,GAA0B,cACnBT,EAAmBxH,QAClB+J,EAAapD,EAAQK,MAEvBK,KADgB0C,GAAc3B,GAAckB,IAE9CI,EAAQK,GAAc3B,GAAckB,MAErC,IAGHrB,GAA0B,WACpB2B,EAAaE,UACXzC,EACFV,EAAQO,IAAIG,GAEZV,EAAQQ,WAGX,CAACE,IAGJY,GAA0B,eACLtB,EAAQK,WAErBgD,EAAa5B,GAAckB,EAC7BU,IAAe3C,GACnBqC,EAAQM,MACP,CAAC3C,EAAMe,EAAYkB,IAGtBrB,GAA0B,cACnBZ,GACAsC,IACUhD,EAAQK,OACPyC,IAAqBpC,QAE/B4C,EAAY7C,EAAsBC,GAClC6C,EAAa/B,GAAUgC,SAASC,YACtCF,EAAWG,UAAUC,IAAIL,GAClB,WACLC,EAAWG,UAAUE,OAAON,OAE7B,CAACN,EAAyBxB,EAAQd,EAAMoC,IAEpC,CAACpC,EAAMwC,YAGAW,EACdxK,EACAqH,OAEOoD,EAAetK,WAAekH,MAC/BqD,EAAwBvK,WAAc,eACrCsK,EAAa,OAAO,SACpB9C,EAAgC3H,GAAQ,OAAO,SAC/CwH,EAAmBxH,GAAQ,OAAOA,QACVA,EAAMyH,OAA3BC,IAAAA,MAAUD,iBACZkD,EAAY3C,EAAiBN,eAG9B1H,GACHyH,YACKA,EACA9B,EACD8B,EACAzH,EACA2K,EAnOoB,mBAsOtBjD,MAAAA,IAEFkD,YAAa5K,EAAMyH,WAEpB,CAACgD,EAAazK,IAEX6K,EAAgB1K,WAAc,kBAC7BkH,EACDM,EAAgC3H,GAAe,KAC9CwH,EAAmBxH,GAEpBqH,IAASS,EAAwB9H,QACvBA,GAAO8K,YAAazD,SAI7BrH,GACHyH,YACKzH,EAAMyH,OACNzH,EAAMyH,OAAOC,MAAML,IAExByD,YAAazD,EACbuD,YAAa5K,EAAMyH,SAbkBzH,EAFrB,OAiBjB,CAACA,EAAOqH,WAEHqD,GAAyBG,MAGtBE,EAAmB5K,gBAA2C,MA0D3E,SAAS6K,uBAEiB,MADxB7C,0EAGqCzB,oCAH5B,0LAxCTuE,IAAAA,aACAC,IAAAA,cACAC,IAAAA,sCAOEC,IAAAA,SACAjD,IAAAA,OACAkD,IAAAA,eAEMrL,EAAQG,aAAiB8K,OAC1BjL,QACG,IAAIsL,MACR,oEAGEC,EAAarD,EAAkBlI,EAAO,CAAEmI,OAAAA,IACxCqD,EAAiBhB,EAAkBxK,EAAOuL,EAAW,WAEzDpL,gCACEA,gBAACgL,GAAeE,eAAgBA,IAChClL,gBAAC+K,GAAclL,MAAOwL,GACpBrL,gBAAC4K,EAAiBU,UAASzK,MAAOuK,GAC/BH,0CA9PXpL,uBAC8B,MAA5BqL,eAAAA,aAAiB,aAEd7D,EAAmBxH,GAAQ,OAAO,WAEVA,EAAMyH,OAA3BC,IAAAA,MAAUD,iBACZkD,EAAY3C,EAAiBN,GAE/BgE,EAASlF,EACXiB,EACAzH,EACA2K,EA7D0B,2BAiEnBgB,EAA8BtE,OAC/BuE,EA/DV,SAAsB5L,EAAwBqH,eAEvCrH,GACHyH,YAAazH,EAAMyH,OAAWzH,EAAMyH,OAAOC,MAAML,MA4D/BwE,CAAa7L,EAA0BqH,KAC5BuE,EAAUnE,OAA/BC,IAAAA,aACDlB,sBACWkB,EAAML,IACtBuE,EACAjB,EAvEwB,yBA4EW,IAAnC3K,EAAMsI,0BACRhB,EAAa6B,SAAQ,SAAC9B,MAChBK,EAAML,GAAO,KACTyE,YAA2BvE,EAAkBF,GACnDqE,GAAaI,MAAcH,EAA8BtE,YAKvCS,EAAwB9H,WAC1B8F,OAAOF,KAAK8B,IAAQyB,SAAQ,SAAC9B,OAC3C9B,OAAW6B,EAAsBC,GACvCqE,GAAanG,MAAOoG,EAA8BtE,UAG1CgE,MAAkBK,sDA4O5BK,UAGE5L,0BACEoF,IAAI,0BACJyG,wBAAyB,CAAEC,OAAQjB,EAAce,kDAMrDA,oBAEkBf,EAAce,kEFpXRG,MACA,iBAAbA,EAAuB,OAAOA,UACrCpD,EACAqD,EAAY,EACV7K,EAAS,oBAEJ8K,EAAsDtD,KAAhDuD,EAAgDvD,KAAzC9H,EAAyC8H,KAAlCwD,EAAkCxD,KAA7ByD,EAA6BzD,KAAvB0D,EAAuB1D,KAAhBJ,EAAgBI,KAAT2D,EAAS3D,QAC3D0D,EACFlL,EAAOoL,KAAKR,EAASS,MAAMR,EAAWrD,EAAQ8D,QAC9CtL,EAAOoL,KAAKF,GA+BlB,SAAwBN,WAClBpD,EACAqD,EAAY,EACV7K,EAAS,oBAEJuL,EAAmC/D,KAA7BsD,EAA6BtD,KAAvBuD,EAAuBvD,KAAhB9H,EAAgB8H,KAATgE,EAAShE,KACtCiE,EAAUlI,EAAqBuH,GACjCW,IACFzL,EAAOoL,KAAKR,EAASS,MAAMR,EAAWrD,EAAQ8D,QAC9CtL,EAAOoL,MACL,SAAClL,YAAiBqL,EAAOT,EAAOC,EAAQU,EAAO/L,EAAP+L,CAAcvL,GAAKsL,KAE7DX,EAAYrD,EAAQ8D,MAAQ9D,EAAQ,GAAGkE,SARnClE,EAAU5D,EAAa+H,KAAKf,eAWpC5K,EAAOoL,KAAKR,EAASS,MAAMR,EAAWD,EAASc,SACxC1L,EA9CH4L,CAAexE,GAAOS,SAAQ,SAACvE,UAAMtD,EAAOoL,KAAK9H,MACjDtD,EAAOoL,KAAKD,GACZN,EAAYrD,EAAQ8D,MAAQ9D,EAAQ,GAAGkE,WAClC,KACCD,EAAUpK,EAAoByJ,GAChCW,IACFzL,EAAOoL,KAAKR,EAASS,MAAMR,EAAWrD,EAAQ8D,QAC9CtL,EAAOoL,MACL,SAAClL,YACI4K,EAAOC,EAAQU,EAAO/L,EAAP+L,CAAcvL,IAAK8K,GAAO,IAAKC,KAErDJ,EAAYrD,EAAQ8D,MAAQ9D,EAAQ,GAAGkE,UAhBrClE,EAAU9D,EAAaiI,KAAKf,eAoBpC5K,EAAOoL,KAAKR,EAASS,MAAMR,EAAWD,EAASc,SACxC1L,wBE2QT,eACQ6L,EAAiBhN,aAAiB4K,OAEnCoC,QACG,IAAI7B,wEAGL6B,+FN1R0BnN,OAC3BoN,EAAcrN,EAAoBC,GAClCM,EAAQJ,WACPC,WAAc,kBAEjB2F,OAAOF,KAAKwH,GACTC,UACAxE,MACC,SAACyE,UAAyB,OAAVhN,GAAkBA,EAAQ8M,EAAYE,OACnD,OAER,CAACF,EAAa9M,iEASUN,EAAcuF,OACnCvE,EA/CR,SAA0BhB,EAAcuF,OAEhCgI,EADcxN,EAAoBC,GACTuF,UACT,IAAfgI,EAAmB,KAAOA,EAAa,IA4ChCC,CAAiBxN,EAAOuF,GAChCjF,EAAQJ,WACG,OAAVI,GAA4B,OAAVU,GAAkBV,EAAQU,+BAT1BhB,EAAcuF,OACjCvE,EAvDR,SAA0BhB,EAAcuF,OAEhCvE,EADcjB,EAAoBC,GACduF,UACT,IAAVvE,EAAc,KAAOA,EAoDdyM,CAAiBzN,EAAOuF,GAChCjF,EAAQJ,WACG,OAAVI,GAA4B,OAAVU,GAAkBV,GAASU"}