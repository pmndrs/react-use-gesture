import * as CSS from 'csstype';
import { SystemProp, ITheme, Theme, VariantsType } from '../types';
export declare type ShadowGetter<T extends ITheme = Theme> = VariantsType<T['shadows']>;
export declare const getShadow: import("../types").ThemeGetter<(string | number) & {}>;
declare type OpacityProp<T extends ITheme> = SystemProp<CSS.Property.Opacity, T>;
export interface OpacityProps<T extends ITheme = Theme> {
    opacity?: OpacityProp<T>;
    motionSafeOpacity?: OpacityProp<T>;
    motionReduceOpacity?: OpacityProp<T>;
    firstOpacity?: OpacityProp<T>;
    lastOpacity?: OpacityProp<T>;
    oddOpacity?: OpacityProp<T>;
    evenOpacity?: OpacityProp<T>;
    visitedOpacity?: OpacityProp<T>;
    checkedOpacity?: OpacityProp<T>;
    focusWithinOpacity?: OpacityProp<T>;
    hoverOpacity?: OpacityProp<T>;
    focusOpacity?: OpacityProp<T>;
    focusVisibleOpacity?: OpacityProp<T>;
    activeOpacity?: OpacityProp<T>;
    disabledOpacity?: OpacityProp<T>;
    placeholderOpacity?: OpacityProp<T>;
}
export declare const opacity: import("../types").StyleGenerator;
declare type BoxShadowProp<T extends ITheme> = SystemProp<ShadowGetter<T> | CSS.Property.BoxShadow, T>;
export interface BoxShadowProps<T extends ITheme = Theme> {
    boxShadow?: BoxShadowProp<T>;
    motionSafeBoxShadow?: BoxShadowProp<T>;
    motionReduceBoxShadow?: BoxShadowProp<T>;
    firstBoxShadow?: BoxShadowProp<T>;
    lastBoxShadow?: BoxShadowProp<T>;
    oddBoxShadow?: BoxShadowProp<T>;
    evenBoxShadow?: BoxShadowProp<T>;
    visitedBoxShadow?: BoxShadowProp<T>;
    checkedBoxShadow?: BoxShadowProp<T>;
    focusWithinBoxShadow?: BoxShadowProp<T>;
    hoverBoxShadow?: BoxShadowProp<T>;
    focusBoxShadow?: BoxShadowProp<T>;
    focusVisibleBoxShadow?: BoxShadowProp<T>;
    activeBoxShadow?: BoxShadowProp<T>;
    disabledBoxShadow?: BoxShadowProp<T>;
    placeholderBoxShadow?: BoxShadowProp<T>;
}
export declare const boxShadow: import("../types").StyleGenerator;
declare type TextShadowProp<T extends ITheme> = SystemProp<ShadowGetter<T> | CSS.Property.TextShadow, T>;
export interface TextShadowProps<T extends ITheme = Theme> {
    boxShadow?: TextShadowProp<T>;
    motionSafeTextShadow?: TextShadowProp<T>;
    motionReduceTextShadow?: TextShadowProp<T>;
    firstTextShadow?: TextShadowProp<T>;
    lastTextShadow?: TextShadowProp<T>;
    oddTextShadow?: TextShadowProp<T>;
    evenTextShadow?: TextShadowProp<T>;
    visitedTextShadow?: TextShadowProp<T>;
    checkedTextShadow?: TextShadowProp<T>;
    focusWithinTextShadow?: TextShadowProp<T>;
    hoverTextShadow?: TextShadowProp<T>;
    focusTextShadow?: TextShadowProp<T>;
    focusVisibleTextShadow?: TextShadowProp<T>;
    activeTextShadow?: TextShadowProp<T>;
    disabledTextShadow?: TextShadowProp<T>;
    placeholderTextShadow?: TextShadowProp<T>;
}
export declare const textShadow: import("../types").StyleGenerator;
export interface EffectsProps<T extends ITheme = Theme> extends OpacityProps<T>, BoxShadowProps<T>, TextShadowProps<T> {
}
export declare const effects: import("../types").StyleGenerator;
export {};
