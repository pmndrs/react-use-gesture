import { useState, useEffect, useMemo, useRef, useCallback, createContext, useContext, createElement, useLayoutEffect, Fragment } from 'react';
import { getBreakpoints, system, getColor, getRadius, getBorderStyle, getShadow, getZIndex, getFont, getFontSize, getLineHeight, getFontWeight, getLetterSpacing, getTransition, getDuration, getAnimation, getTimingFunction, getTransform, getTransitionProperty, getInset, getSpace, getBorder, getBorderWidth, getSize, getBreakpointMax, getBreakpointMin } from '@xstyled/system';
import { obj, string, func, cascade } from '@xstyled/util';

/* eslint-disable no-undef */
function useThemeBreakpoints(theme) {
  return getBreakpoints({
    theme: theme
  });
}
/**
 * Minimum breakpoint width.
 * Null for the smallest breakpoint.
 */

function useThemeMinValue(theme, key) {
  var breakpoints = useThemeBreakpoints(theme);
  var value = breakpoints[key];
  return value === 0 ? null : value;
}
/**
 * Maximum breakpoint width. Null for the largest (last) breakpoint.
 * The maximum value is calculated as the minimum of the next one less 0.02px
 * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
 * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
 * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
 * See https://bugs.webkit.org/show_bug.cgi?id=178261
 */


function useThemeMaxValue(theme, key) {
  var breakpoints = useThemeBreakpoints(theme);
  var breakPoint = breakpoints[key];
  return breakPoint === 0 ? null : breakPoint - 0.02;
}

function useViewportWidth() {
  var _React$useState = useState(typeof window === 'undefined' ? null : window.innerWidth),
      width = _React$useState[0],
      setWidth = _React$useState[1];

  useEffect(function () {
    function handleResize() {
      setWidth(window.innerWidth);
    } // Add the listener, then setWidth to avoid race.


    window.addEventListener('resize', handleResize);
    setWidth(window.innerWidth);
    return function () {
      return window.removeEventListener('resize', handleResize);
    };
  }, []);
  return width;
}
function useThemeBreakpoint(theme) {
  var breakpoints = useThemeBreakpoints(theme);
  var width = useViewportWidth();
  return useMemo(function () {
    return Object.keys(breakpoints).reverse().find(function (breakpoint) {
      return width !== null && width > breakpoints[breakpoint];
    }) || null;
  }, [breakpoints, width]);
}
function useThemeUp(theme, key) {
  var value = useThemeMinValue(theme, key);
  var width = useViewportWidth();
  return width !== null && value !== null && width >= value;
}
function useThemeDown(theme, key) {
  var value = useThemeMaxValue(theme, key);
  var width = useViewportWidth();
  return width !== null && value !== null && width < value;
}

function createBox() {
  return ["&&{", system, "}"];
}
createBox.meta = system.meta;

var getNumber = function getNumber(transform) {
  return function (value) {
    var num = Number(value);
    return transform(Number.isNaN(num) ? value : num);
  };
};

var SPACES = /\s+/;

var getMultiDimensions = function getMultiDimensions(transform) {
  return function (value) {
    var values = value.split(SPACES);
    return function (p) {
      return values.map(function (value) {
        return transform(value)(p);
      }).join(' ');
    };
  };
};

var COMMA = /\s*,\s*/;

var getMultiValues = function getMultiValues(transform) {
  return function (value) {
    var values = value.split(COMMA);
    return function (p) {
      return values.map(function (value) {
        return transform(value)(p);
      }).join(',');
    };
  };
};

var getNumberInset = /*#__PURE__*/getNumber(getInset);
var getNumberSpace = /*#__PURE__*/getNumber(getSpace);
var getMultiNumberSpace = /*#__PURE__*/getMultiDimensions(getNumberSpace);
var getNumberBorder = /*#__PURE__*/getNumber(getBorder);
var getNumberBorderWidth = /*#__PURE__*/getNumber(getBorderWidth);
var getMultiNumberBorderWidth = /*#__PURE__*/getMultiDimensions(getNumberBorderWidth);
var getNumberSize = /*#__PURE__*/getNumber(getSize);
var getMultiBorderStyle = /*#__PURE__*/getMultiDimensions(getBorderStyle);
var propGetters = {
  // getSpace
  margin: getMultiNumberSpace,
  'margin-top': getNumberSpace,
  'margin-bottom': getNumberSpace,
  'margin-left': getNumberSpace,
  'margin-right': getNumberSpace,
  padding: getMultiNumberSpace,
  'padding-top': getNumberSpace,
  'padding-bottom': getNumberSpace,
  'padding-left': getNumberSpace,
  'padding-right': getNumberSpace,
  gap: getMultiNumberSpace,
  'grid-gap': getMultiNumberSpace,
  'row-gap': getNumberSpace,
  'grid-row-gap': getNumberSpace,
  'column-gap': getNumberSpace,
  'grid-column-gap': getNumberSpace,
  // getColor
  color: getColor,
  'background-color': getColor,
  'border-color': getColor,
  'border-top-color': getColor,
  'border-right-color': getColor,
  'border-bottom-color': getColor,
  'border-left-color': getColor,
  'outline-color': getColor,
  fill: getColor,
  stroke: getColor,
  // getRadius
  'border-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-top-left-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-top-right-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-bottom-right-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-bottom-left-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  // getBorder
  border: getNumberBorder,
  'border-top': getNumberBorder,
  'border-right': getNumberBorder,
  'border-bottom': getNumberBorder,
  'border-left': getNumberBorder,
  // getBorderWidth
  'border-width': getMultiNumberBorderWidth,
  'border-top-width': getNumberBorderWidth,
  'border-right-width': getNumberBorderWidth,
  'border-bottom-width': getNumberBorderWidth,
  'border-left-width': getNumberBorderWidth,
  'outline-width': getNumberBorderWidth,
  // getBorderStyle
  'border-style': getMultiBorderStyle,
  'border-top-style': getBorderStyle,
  'border-right-style': getBorderStyle,
  'border-bottom-style': getBorderStyle,
  'border-left-style': getBorderStyle,
  'outline-style': getBorderStyle,
  // getShadow
  'box-shadow': /*#__PURE__*/getMultiValues(getShadow),
  'text-shadow': /*#__PURE__*/getMultiValues(getShadow),
  // getSize
  width: getNumberSize,
  height: getNumberSize,
  'max-width': getNumberSize,
  'max-height': getNumberSize,
  'min-width': getNumberSize,
  'min-height': getNumberSize,
  'mask-size': /*#__PURE__*/getMultiValues(getNumberSize),
  // getZIndex
  'z-index': /*#__PURE__*/getNumber(getZIndex),
  // getFont
  'font-family': getFont,
  // getFontSize
  'font-size': /*#__PURE__*/getNumber(getFontSize),
  // getLineHeight
  'line-height': /*#__PURE__*/getNumber(getLineHeight),
  // getFontWeight
  'font-weight': getFontWeight,
  // getLetterSpacing
  'letter-spacing': /*#__PURE__*/getNumber(getLetterSpacing),
  // getTransition
  transition: getTransition,
  // getDuration
  'transition-duration': getDuration,
  'animation-duration': getDuration,
  // getAnimation
  animation: getAnimation,
  // getInset
  top: getNumberInset,
  right: getNumberInset,
  bottom: getNumberInset,
  left: getNumberInset,
  // getTimingFunction
  'animation-timing-function': getTimingFunction,
  'transition-timing-function': getTimingFunction,
  // getTransform
  transform: getTransform,
  // getTransitionProperty
  'transition-property': getTransitionProperty
};

var getMediaWidth = function getMediaWidth(getBreakpointBound) {
  return function (value) {
    return function (props) {
      var v = getBreakpointBound(getBreakpoints(props), value); // getters return null for smallest, undefined for not found, and otherwise
      // a px string. Since we MUST emit a matcher at this point, use 0px for the
      // smallest case (always true for min, never true for max).

      return v === null ? '0' : v || value;
    };
  };
};

var mediaGetters = {
  'min-width': /*#__PURE__*/getMediaWidth(getBreakpointMin),
  'max-width': /*#__PURE__*/getMediaWidth(getBreakpointMax)
};

/* eslint-disable no-continue, no-loop-func, no-cond-assign */

var PROP_CHAR = "[-\\w]"; // prop value consists of non-semis and no curly braces unless backslash-escaped.
// This uses [\s\S] instead of . because IE11 doesn't support the s flag.

var VALUE_CHAR = "(?:\\\\[\\s\\S]|[^\\\\;{}])"; // prettier-ignore

var PROP_PATT = "(" + PROP_CHAR + "+)" + // capture prop name
"(\\s*:\\s*)" + // colon & whitespace
"(?=\\S)" + ( // prop value starts with non-whitespace
"(" + VALUE_CHAR + "*?)") + // capture prop value (non-greedy)
"(\\s*!important)?" + // capture !important
"(\\s*;)" // semi & whitespace
; // simplistic but workable media query value.

var MEDIA_CHAR = "[^{]"; // prettier-ignore

var MEDIA_PATT = "(@media\\b\\s*)" + // start of media query
"(?=\\S)" + ( // value starts with non-whitespace
"(" + MEDIA_CHAR + "+?)") + // capture queries (non-greedy)
"(\\s*\\{)" // brace & whitespace
;
var MATCH_REGEXP = /*#__PURE__*/new RegExp("(?:" + PROP_PATT + "|" + MEDIA_PATT + ")", "g");
function transform(rawValue) {
  if (typeof rawValue !== 'string') return rawValue;
  var matches;
  var lastIndex = 0;
  var values = [];

  var _loop = function _loop() {
    var _matches = matches,
        prop = _matches[1],
        colon = _matches[2],
        value = _matches[3],
        imp = _matches[4],
        semi = _matches[5],
        media = _matches[6],
        query = _matches[7],
        brace = _matches[8];

    if (media) {
      values.push(rawValue.slice(lastIndex, matches.index));
      values.push(media);
      mediaTransform(query).forEach(function (v) {
        return values.push(v);
      });
      values.push(brace);
      lastIndex = matches.index + matches[0].length;
    } else {
      var getter = propGetters[prop];

      if (getter) {
        values.push(rawValue.slice(lastIndex, matches.index));
        values.push(function (p) {
          return "" + prop + colon + getter(value)(p) + (imp || '') + semi;
        });
        lastIndex = matches.index + matches[0].length;
      }
    }
  };

  while (matches = MATCH_REGEXP.exec(rawValue)) {
    _loop();
  }

  values.push(rawValue.slice(lastIndex, rawValue.length));
  return values;
} // media query prop/value pairs such as (min-width: 1024px)
// prettier-ignore

var QUERY_REGEXP = /*#__PURE__*/new RegExp("(\\(\\s*)" + ( // open paren, whitespace
"(" + PROP_CHAR + "+)") + // capture prop name
"(\\s*:\\s*)" + // colon & whitespace
"([^\\)]*?)" + // capture prop value (non-greedy)
"(\\s*\\))", // close paren, whitespace
"g");

function mediaTransform(rawValue) {
  var matches;
  var lastIndex = 0;
  var values = [];

  var _loop2 = function _loop2() {
    var _matches2 = matches,
        open = _matches2[1],
        prop = _matches2[2],
        colon = _matches2[3],
        value = _matches2[4],
        close = _matches2[5];
    var getter = mediaGetters[prop];

    if (getter) {
      values.push(rawValue.slice(lastIndex, matches.index));
      values.push(function (p) {
        return "" + open + prop + colon + getter(value)(p) + close;
      });
      lastIndex = matches.index + matches[0].length;
    }
  };

  while (matches = QUERY_REGEXP.exec(rawValue)) {
    _loop2();
  }

  values.push(rawValue.slice(lastIndex, rawValue.length));
  return values;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var join = function join() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(Boolean).join('.');
};

var toVarName = function toVarName(key) {
  return "--" + key.replace(/\./g, '-');
};

var toVarValue = function toVarValue(key, value) {
  return "var(" + toVarName(key) + ", " + value + ")";
};

var toProp = function toProp(key, value) {
  return key + ": " + value + ";";
};

function toCustomPropertiesReferences(values, theme, keys, parent) {
  if (keys === void 0) {
    keys = Object.keys(values);
  }

  var next = Array.isArray(values) ? [] : {};

  for (var i in keys) {
    var key = keys[i];
    var value = values[key];
    var name = join(parent, key);

    if (obj(value)) {
      next[key] = toCustomPropertiesReferences(value, theme, Object.keys(value), name);
      continue;
    }

    if (string(value)) {
      next[key] = toVarValue(name, value);
      continue;
    }

    if (func(value)) {
      next[key] = toVarValue(name, cascade(value, {
        theme: theme
      }));
      continue;
    }
  }

  return next;
}
function toCustomPropertiesDeclarations(values, theme, keys, parent, state) {
  if (keys === void 0) {
    keys = Object.keys(values);
  }

  if (state === void 0) {
    state = {
      value: ''
    };
  }

  for (var i in keys) {
    var key = keys[i];
    var value = values[key];
    var name = join(parent, key);

    if (obj(value)) {
      toCustomPropertiesDeclarations(value, theme, Object.keys(value), name, state);
      continue;
    }

    if (string(value)) {
      state.value += toProp(toVarName(name), value);
      continue;
    }

    if (func(value)) {
      state.value += toProp(toVarName(name), cascade(value, {
        theme: theme
      }));
      continue;
    }
  }

  return state.value;
}

var STORAGE_KEY = 'xstyled-color-mode';

var isLocalStorageAvailable = typeof window !== 'undefined' && /*#__PURE__*/function () {
  try {
    var key = 'xstyled-test-key';
    window.localStorage.setItem(key, key);
    window.localStorage.removeItem(key);
    return true;
  } catch (err) {
    return false;
  }
}();

var storage = isLocalStorageAvailable ? {
  get: function get() {
    return window.localStorage.getItem(STORAGE_KEY);
  },
  set: function set(value) {
    window.localStorage.setItem(STORAGE_KEY, value);
  },
  clear: function clear() {
    return window.localStorage.removeItem(STORAGE_KEY);
  }
} : {
  get: function get() {
    return null;
  },
  set: function set() {},
  clear: function clear() {}
};
var COLOR_MODE_CLASS_PREFIX = 'xstyled-color-mode-';

var getColorModeClassName = function getColorModeClassName(mode) {
  return "" + COLOR_MODE_CLASS_PREFIX + mode;
};

var XSTYLED_COLORS_PREFIX = 'xstyled-colors';
var SYSTEM_MODES = ['light', 'dark'];

function getModeTheme(theme, mode) {
  return _extends({}, theme, {
    colors: _extends({}, theme.colors, theme.colors.modes[mode])
  });
}

var getMediaQuery = function getMediaQuery(query) {
  return "@media " + query;
};

var getColorModeQuery = function getColorModeQuery(mode) {
  return "(prefers-color-scheme: " + mode + ")";
};

function checkHasColorModes(theme) {
  return Boolean(theme && theme.colors && theme.colors.modes);
}

function checkHasCustomPropertiesEnabled(theme) {
  return Boolean(theme && (theme.useCustomProperties === undefined || theme.useCustomProperties));
}

function checkHasMediaQueryEnabled(theme) {
  return Boolean(theme && (theme.useColorSchemeMediaQuery === undefined || theme.useColorSchemeMediaQuery));
}

function getInitialColorModeName(theme) {
  return theme.initialColorModeName || 'default';
}

function getDefaultColorModeName(theme) {
  return theme.defaultColorModeName || getInitialColorModeName(theme);
}

function getUsedColorKeys(modes) {
  var keys = [];

  for (var key in modes) {
    keys = [].concat(keys, Object.keys(modes[key]));
  }

  return keys;
}

function createColorStyles(theme, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$targetSelector = _ref.targetSelector,
      targetSelector = _ref$targetSelector === void 0 ? 'body' : _ref$targetSelector;

  if (!checkHasColorModes(theme)) return null;

  var _theme$colors = theme.colors,
      modes = _theme$colors.modes,
      colors = _objectWithoutPropertiesLoose(_theme$colors, ["modes"]);

  var colorKeys = getUsedColorKeys(modes);
  var styles = toCustomPropertiesDeclarations(colors, theme, colorKeys, XSTYLED_COLORS_PREFIX);

  function getModePropertiesDeclarations(mode) {
    var modeTheme = getModeTheme(theme, mode);

    var _modeTheme$colors = modeTheme.colors,
        modes = _modeTheme$colors.modes,
        colors = _objectWithoutPropertiesLoose(_modeTheme$colors, ["modes"]);

    return toCustomPropertiesDeclarations(_extends({}, colors, modes[mode]), modeTheme, colorKeys, XSTYLED_COLORS_PREFIX);
  }

  if (theme.useColorSchemeMediaQuery !== false) {
    SYSTEM_MODES.forEach(function (mode) {
      if (modes[mode]) {
        var mediaQuery = getMediaQuery(getColorModeQuery(mode));
        styles += mediaQuery + "{" + getModePropertiesDeclarations(mode) + "}";
      }
    });
  }

  var initialModeName = getInitialColorModeName(theme);
  [initialModeName].concat(Object.keys(modes)).forEach(function (mode) {
    var key = "&." + getColorModeClassName(mode);
    styles += key + "{" + getModePropertiesDeclarations(mode) + "}";
  });
  return targetSelector + "{" + styles + "}";
}

function getSystemModeMql(mode) {
  if (typeof window === 'undefined' || window.matchMedia === undefined) {
    return null;
  }

  var query = getColorModeQuery(mode);
  return window.matchMedia(query);
}

function useSystemMode(theme) {
  var configs = useMemo(function () {
    if (!checkHasMediaQueryEnabled(theme)) return [];
    return SYSTEM_MODES.map(function (mode) {
      if (!checkHasColorModes(theme)) return null;
      if (!theme.colors.modes[mode]) return null;
      var mql = getSystemModeMql(mode);
      return mql ? {
        mode: mode,
        mql: mql
      } : null;
    }).filter(Boolean);
  }, [theme]);

  var _React$useState = useState(function () {
    var config = configs.find(function (config) {
      return config.mql.matches;
    });
    return config ? config.mode : null;
  }),
      systemMode = _React$useState[0],
      setSystemMode = _React$useState[1];

  useEffect(function () {
    var cleans = configs.map(function (_ref2) {
      var mode = _ref2.mode,
          mql = _ref2.mql;

      var handler = function handler(_ref3) {
        var matches = _ref3.matches;

        if (matches) {
          setSystemMode(mode);
        } else {
          setSystemMode(function (previousMode) {
            return previousMode === mode ? null : mode;
          });
        }
      };

      mql.addEventListener('change', handler);
      return function () {
        return mql.removeEventListener('change', handler);
      };
    });
    return function () {
      return cleans.forEach(function (clean) {
        return clean();
      });
    };
  });
  return systemMode;
}

var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
function useColorModeState(theme, _temp2) {
  var _ref4 = _temp2 === void 0 ? {} : _temp2,
      target = _ref4.target;

  var systemMode = useSystemMode(theme);
  var defaultColorMode = getDefaultColorModeName(theme);
  var initialColorMode = getInitialColorModeName(theme);

  var _React$useState2 = useState(function () {
    if (!checkHasColorModes(theme)) return null;
    return defaultColorMode;
  }),
      mode = _React$useState2[0],
      setMode = _React$useState2[1]; // Add mode className


  var customPropertiesEnabled = checkHasCustomPropertiesEnabled(theme);
  var manualSetRef = useRef(false);
  var manuallySetMode = useCallback(function (value) {
    manualSetRef.current = true;
    setMode(value);
  }, []); // Set initial color mode in lazy

  useIsomorphicLayoutEffect(function () {
    if (!checkHasColorModes(theme)) return;
    var storedMode = storage.get();
    var initialMode = storedMode || systemMode || defaultColorMode;

    if (mode !== initialMode) {
      setMode(storedMode || systemMode || defaultColorMode);
    }
  }, []); // Store mode preference

  useIsomorphicLayoutEffect(function () {
    if (manualSetRef.current) {
      if (mode) {
        storage.set(mode);
      } else {
        storage.clear();
      }
    }
  }, [mode]); // Sync system mode

  useIsomorphicLayoutEffect(function () {
    var storedMode = storage.get();
    if (storedMode) return;
    var targetMode = systemMode || defaultColorMode;
    if (targetMode === mode) return;
    setMode(targetMode);
  }, [mode, systemMode, defaultColorMode]); // Add and remove class names

  useIsomorphicLayoutEffect(function () {
    if (!mode) return undefined;
    if (!customPropertiesEnabled) return undefined;
    var stored = storage.get();
    var initial = initialColorMode !== mode;
    if (!stored && !initial) return undefined;
    var className = getColorModeClassName(mode);
    var usedTarget = target || document.body;
    usedTarget.classList.add(className);
    return function () {
      usedTarget.classList.remove(className);
    };
  }, [customPropertiesEnabled, target, mode, initialColorMode]);
  return [mode, manuallySetMode];
}
function useColorModeTheme(theme, mode) {
  var _React$useState3 = useState(mode),
      initialMode = _React$useState3[0];

  var customPropertiesTheme = useMemo(function () {
    if (!initialMode) return null;
    if (!checkHasCustomPropertiesEnabled(theme)) return null;
    if (!checkHasColorModes(theme)) return theme;

    var _theme$colors2 = theme.colors,
        modes = _theme$colors2.modes,
        colors = _objectWithoutPropertiesLoose(_theme$colors2, ["modes"]);

    var colorKeys = getUsedColorKeys(modes);
    return _extends({}, theme, {
      colors: _extends({}, colors, toCustomPropertiesReferences(colors, theme, colorKeys, XSTYLED_COLORS_PREFIX), {
        modes: modes
      }),
      __rawColors: theme.colors
    });
  }, [initialMode, theme]);
  var swapModeTheme = useMemo(function () {
    if (!mode) return null;
    if (checkHasCustomPropertiesEnabled(theme)) return null;
    if (!checkHasColorModes(theme)) return theme;

    if (mode === getInitialColorModeName(theme)) {
      return _extends({}, theme, {
        __colorMode: mode
      });
    }

    return _extends({}, theme, {
      colors: _extends({}, theme.colors, theme.colors.modes[mode]),
      __colorMode: mode,
      __rawColors: theme.colors
    });
  }, [theme, mode]);
  return customPropertiesTheme || swapModeTheme;
}
var ColorModeContext = /*#__PURE__*/createContext(null);
function useColorMode() {
  var colorModeState = useContext(ColorModeContext);

  if (!colorModeState) {
    throw new Error("[useColorMode] requires the ColorModeProvider component");
  }

  return colorModeState;
}
function createColorModeProvider(_ref5) {
  var ThemeContext = _ref5.ThemeContext,
      ThemeProvider = _ref5.ThemeProvider,
      ColorModeStyle = _ref5.ColorModeStyle;

  function ColorModeProvider(_ref6) {
    var children = _ref6.children,
        target = _ref6.target,
        targetSelector = _ref6.targetSelector;
    var theme = useContext(ThemeContext);

    if (!theme) {
      throw new Error('[ColorModeProvider] requires ThemeProvider upper in the tree');
    }

    var colorState = useColorModeState(theme, {
      target: target
    });
    var colorModeTheme = useColorModeTheme(theme, colorState[0]);
    return createElement(Fragment, null, createElement(ColorModeStyle, {
      targetSelector: targetSelector
    }), createElement(ThemeProvider, {
      theme: colorModeTheme
    }, createElement(ColorModeContext.Provider, {
      value: colorState
    }, children)));
  }

  return ColorModeProvider;
}

function getInitScript(_temp3) {
  var _ref7 = _temp3 === void 0 ? {} : _temp3,
      _ref7$target = _ref7.target,
      target = _ref7$target === void 0 ? 'document.body' : _ref7$target;

  return "(function() { try {\n    var mode = localStorage.getItem('" + STORAGE_KEY + "');\n    if (mode) " + target + ".classList.add('" + COLOR_MODE_CLASS_PREFIX + "' + mode);\n  } catch (e) {} })();";
}

function getColorModeInitScriptElement(options) {
  return createElement("script", {
    key: "xstyled-color-mode-init",
    dangerouslySetInnerHTML: {
      __html: getInitScript(options)
    }
  });
}
function getColorModeInitScriptTag(options) {
  return "<script>" + getInitScript(options) + "</script>";
}

export { ColorModeContext, createBox, createColorModeProvider, createColorStyles, getColorModeInitScriptElement, getColorModeInitScriptTag, propGetters, transform, useColorMode, useColorModeState, useColorModeTheme, useThemeBreakpoint, useThemeBreakpoints, useThemeDown, useThemeUp, useViewportWidth };
//# sourceMappingURL=core.esm.js.map
