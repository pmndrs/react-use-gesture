import * as CSS from 'csstype';
import { SystemProp, ITheme, Theme, VariantsType } from '../types';
export declare type TransitionGetter<T extends ITheme = Theme> = VariantsType<T['transitions']>;
export declare const getTransition: import("../types").ThemeGetter<(string | number) & {}>;
export declare type TransitionPropertyGetter<T extends ITheme = Theme> = VariantsType<T['transitionProperties']>;
export declare const getTransitionProperty: import("../types").ThemeGetter<(string | number) & {}>;
export declare type TimingFunctionGetter<T extends ITheme = Theme> = VariantsType<T['timingFunctions']>;
export declare const getTimingFunction: import("../types").ThemeGetter<(string | number) & {}>;
declare type TransitionProp<T extends ITheme> = SystemProp<TransitionGetter<T> | CSS.Property.Transition, T>;
export interface TransitionProps<T extends ITheme = Theme> {
    transition?: TransitionProp<T>;
    motionSafeTransition?: TransitionProp<T>;
    motionReduceTransition?: TransitionProp<T>;
    firstTransition?: TransitionProp<T>;
    lastTransition?: TransitionProp<T>;
    oddTransition?: TransitionProp<T>;
    evenTransition?: TransitionProp<T>;
    visitedTransition?: TransitionProp<T>;
    checkedTransition?: TransitionProp<T>;
    focusWithinTransition?: TransitionProp<T>;
    hoverTransition?: TransitionProp<T>;
    focusTransition?: TransitionProp<T>;
    focusVisibleTransition?: TransitionProp<T>;
    activeTransition?: TransitionProp<T>;
    disabledTransition?: TransitionProp<T>;
    placeholderTransition?: TransitionProp<T>;
}
export declare const transition: import("../types").StyleGenerator;
declare type TransitionPropertyProp<T extends ITheme> = SystemProp<TransitionPropertyGetter<T> | CSS.Property.TransitionProperty, T>;
export interface TransitionPropertyProps<T extends ITheme = Theme> {
    transitionProperty?: TransitionPropertyProp<T>;
    motionSafeTransitionProperty?: TransitionPropertyProp<T>;
    motionReduceTransitionProperty?: TransitionPropertyProp<T>;
    firstTransitionProperty?: TransitionPropertyProp<T>;
    lastTransitionProperty?: TransitionPropertyProp<T>;
    oddTransitionProperty?: TransitionPropertyProp<T>;
    evenTransitionProperty?: TransitionPropertyProp<T>;
    visitedTransitionProperty?: TransitionPropertyProp<T>;
    checkedTransitionProperty?: TransitionPropertyProp<T>;
    focusWithinTransitionProperty?: TransitionPropertyProp<T>;
    hoverTransitionProperty?: TransitionPropertyProp<T>;
    focusTransitionProperty?: TransitionPropertyProp<T>;
    focusVisibleTransitionProperty?: TransitionPropertyProp<T>;
    activeTransitionProperty?: TransitionPropertyProp<T>;
    disabledTransitionProperty?: TransitionPropertyProp<T>;
    placeholderTransitionProperty?: TransitionPropertyProp<T>;
}
export declare const transitionProperty: import("../types").StyleGenerator;
declare type TransitionDurationProp<T extends ITheme> = SystemProp<number | CSS.Property.TransitionDuration, T>;
export interface TransitionDurationProps<T extends ITheme = Theme> {
    transitionDuration?: TransitionDurationProp<T>;
    motionSafeTransitionDuration?: TransitionDurationProp<T>;
    motionReduceTransitionDuration?: TransitionDurationProp<T>;
    firstTransitionDuration?: TransitionDurationProp<T>;
    lastTransitionDuration?: TransitionDurationProp<T>;
    oddTransitionDuration?: TransitionDurationProp<T>;
    evenTransitionDuration?: TransitionDurationProp<T>;
    visitedTransitionDuration?: TransitionDurationProp<T>;
    checkedTransitionDuration?: TransitionDurationProp<T>;
    focusWithinTransitionDuration?: TransitionDurationProp<T>;
    hoverTransitionDuration?: TransitionDurationProp<T>;
    focusTransitionDuration?: TransitionDurationProp<T>;
    focusVisibleTransitionDuration?: TransitionDurationProp<T>;
    activeTransitionDuration?: TransitionDurationProp<T>;
    disabledTransitionDuration?: TransitionDurationProp<T>;
    placeholderTransitionDuration?: TransitionDurationProp<T>;
}
export declare const transitionDuration: import("../types").StyleGenerator;
declare type TransitionTimingFunctionProp<T extends ITheme> = SystemProp<TimingFunctionGetter<T> | CSS.Property.TransitionTimingFunction, T>;
export interface TransitionTimingFunctionProps<T extends ITheme = Theme> {
    transitionTimingFunction?: TransitionTimingFunctionProp<T>;
    motionSafeTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    motionReduceTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    firstTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    lastTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    oddTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    evenTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    visitedTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    checkedTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    focusWithinTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    hoverTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    focusTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    focusVisibleTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    activeTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    disabledTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
    placeholderTransitionTimingFunction?: TransitionTimingFunctionProp<T>;
}
export declare const transitionTimingFunction: import("../types").StyleGenerator;
declare type TransitionDelayProp<T extends ITheme> = SystemProp<number | CSS.Property.TransitionDelay, T>;
export interface TransitionDelayProps<T extends ITheme = Theme> {
    transitionDelay?: TransitionDelayProp<T>;
    motionSafeTransitionDelay?: TransitionDelayProp<T>;
    motionReduceTransitionDelay?: TransitionDelayProp<T>;
    firstTransitionDelay?: TransitionDelayProp<T>;
    lastTransitionDelay?: TransitionDelayProp<T>;
    oddTransitionDelay?: TransitionDelayProp<T>;
    evenTransitionDelay?: TransitionDelayProp<T>;
    visitedTransitionDelay?: TransitionDelayProp<T>;
    checkedTransitionDelay?: TransitionDelayProp<T>;
    focusWithinTransitionDelay?: TransitionDelayProp<T>;
    hoverTransitionDelay?: TransitionDelayProp<T>;
    focusTransitionDelay?: TransitionDelayProp<T>;
    focusVisibleTransitionDelay?: TransitionDelayProp<T>;
    activeTransitionDelay?: TransitionDelayProp<T>;
    disabledTransitionDelay?: TransitionDelayProp<T>;
    placeholderTransitionDelay?: TransitionDelayProp<T>;
}
export declare const transitionDelay: import("../types").StyleGenerator;
export interface TransitionsProps<T extends ITheme = Theme> extends TransitionProps<T>, TransitionPropertyProps<T>, TransitionDurationProps<T>, TransitionTimingFunctionProps<T>, TransitionDelayProps<T> {
}
export declare const transitions: import("../types").StyleGenerator;
export {};
