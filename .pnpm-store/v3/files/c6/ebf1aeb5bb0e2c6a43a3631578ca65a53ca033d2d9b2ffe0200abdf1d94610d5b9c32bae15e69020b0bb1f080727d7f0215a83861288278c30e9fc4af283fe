import * as CSS from 'csstype';
import { SystemProp, ITheme, VariantsType, Theme } from '../types';
export declare type AnimationGetter<T extends ITheme = Theme> = VariantsType<T['animations']>;
export declare const getAnimation: import("../types").ThemeGetter<(string | number) & {}>;
declare type AnimationProp<T extends ITheme> = SystemProp<AnimationGetter<T> | CSS.Property.Animation, T>;
export interface AnimationProps<T extends ITheme = Theme> {
    animation?: AnimationProp<T>;
    motionSafeAnimation?: AnimationProp<T>;
    motionReduceAnimation?: AnimationProp<T>;
    firstAnimation?: AnimationProp<T>;
    lastAnimation?: AnimationProp<T>;
    oddAnimation?: AnimationProp<T>;
    evenAnimation?: AnimationProp<T>;
    visitedAnimation?: AnimationProp<T>;
    checkedAnimation?: AnimationProp<T>;
    focusWithinAnimation?: AnimationProp<T>;
    hoverAnimation?: AnimationProp<T>;
    focusAnimation?: AnimationProp<T>;
    focusVisibleAnimation?: AnimationProp<T>;
    activeAnimation?: AnimationProp<T>;
    disabledAnimation?: AnimationProp<T>;
    placeholderAnimation?: AnimationProp<T>;
}
export declare const animation: import("../types").StyleGenerator;
export { AnimationProps as AnimationsProps };
export declare const animations: import("../types").StyleGenerator;
