{"version":3,"file":"styled-components.cjs.production.min.js","sources":["../src/css.ts","../src/createX.ts","../src/x.ts","../src/styled.ts","../src/colorModes.ts","../src/theme.ts","../src/preflight.ts","../src/createGlobalStyle.ts","../src/breakpoints.ts"],"sourcesContent":["/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport { css as scCss, FlattenSimpleInterpolation } from 'styled-components'\nimport { flattenStrings } from '@xstyled/util'\nimport { transform } from '@xstyled/core'\n\nexport function css(\n  ...args: Parameters<typeof scCss>\n): ReturnType<typeof scCss> {\n  const scCssArgs = scCss(...args)\n  const flattenedArgs = flattenStrings(scCssArgs as any[])\n  return flattenedArgs.map(transform) as FlattenSimpleInterpolation\n}\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport styled, { StyledComponent, DefaultTheme } from 'styled-components'\nimport { compose, StyleGenerator } from '@xstyled/system'\n\ntype JSXElementKeys = keyof JSX.IntrinsicElements\n\nconst tags = Object.keys(styled)\n\ntype SafeIntrinsicComponent<T extends keyof JSX.IntrinsicElements> = (\n  props: Omit<JSX.IntrinsicElements[T], 'color'>,\n) => React.ReactElement<any, T>\n\nexport const createX = <TProps extends object>(generator: StyleGenerator) => {\n  type X<TProps extends object> = {\n    extend<TExtendProps extends object>(\n      ...generators: StyleGenerator[]\n    ): X<TExtendProps>\n  } & {\n    [Key in JSXElementKeys]: StyledComponent<\n      SafeIntrinsicComponent<Key>,\n      DefaultTheme,\n      TProps,\n      'color'\n    >\n  }\n\n  // @ts-ignore\n  const x: X<TProps> = {\n    extend: (...generators) => createX(compose(generator, ...generators)),\n  }\n\n  tags.forEach((tag) => {\n    // @ts-ignore\n    x[tag] = styled(tag).withConfig({\n      shouldForwardProp: (prop, defaultValidatorFn) => {\n        if (typeof prop === 'string' && generator.meta.props.includes(prop))\n          return false\n        return defaultValidatorFn(prop)\n      },\n    })<TProps>(() => [`&&{`, generator, `}`])\n  })\n\n  return x\n}\n","import { DefaultTheme } from 'styled-components'\nimport { SystemProps, system } from '@xstyled/system'\nimport { createX } from './createX'\n\nexport const x = createX<\n  SystemProps<Record<string | number, unknown> & DefaultTheme>\n>(system)\n\n// Retro-compatibility\nexport const Box = x.div\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport scStyled, {\n  ThemedStyledFunction,\n  StyledConfig,\n  ThemedBaseStyledInterface,\n  DefaultTheme,\n} from 'styled-components'\nimport { SystemProps } from '@xstyled/system'\nimport { BoxElements } from './BoxElements'\nimport { x } from './x'\nimport { css } from './css'\n\nfunction getCreateStyle(baseCreateStyle: ThemedStyledFunction<any, any>) {\n  // @ts-ignore\n  const createStyle = (...args: any) => baseCreateStyle`${css(...args)}`\n  createStyle.attrs = (attrs: any) => {\n    const nextCreateStyle = baseCreateStyle.attrs(attrs)\n    return getCreateStyle(nextCreateStyle)\n  }\n  createStyle.withConfig = (config: StyledConfig<any>) => {\n    const nextCreateStyle = baseCreateStyle.withConfig(config)\n    return getCreateStyle(nextCreateStyle)\n  }\n  return createStyle\n}\n\ntype ThemedXStyledComponentFactories<T extends object> = {\n  [Key in keyof BoxElements]: ThemedStyledFunction<\n    BoxElements[Key],\n    T,\n    SystemProps<T>\n  >\n}\n\ninterface ThemeBaseXStyledInterface<T extends object>\n  extends ThemedBaseStyledInterface<T>,\n    ThemedXStyledComponentFactories<T> {}\n\ntype XStyledInterface = ThemeBaseXStyledInterface<DefaultTheme>\n\nexport const styled = <XStyledInterface>(\n  ((component: any) => getCreateStyle(scStyled(component)))\n)\n\n// @ts-ignore\nstyled.box = styled(x.div)\n\nObject.keys(scStyled).forEach((key) => {\n  // @ts-ignore\n  styled[key] = styled(key)\n  // @ts-ignore\n  styled[`${key}Box`] = styled(x[key])\n})\n","import {\n  createGlobalStyle,\n  ThemeContext,\n  ThemeProvider,\n} from 'styled-components'\nimport { createColorModeProvider, createColorStyles } from '@xstyled/core'\n\nconst ColorModeStyle = createGlobalStyle`${(p: {\n  theme: any\n  targetSelector: string\n}) => createColorStyles(p.theme, { targetSelector: p.targetSelector })}`\n\nexport const ColorModeProvider = createColorModeProvider({\n  ThemeContext,\n  ThemeProvider,\n  ColorModeStyle,\n})\n\nexport {\n  useColorMode,\n  getColorModeInitScriptElement,\n  getColorModeInitScriptTag,\n} from '@xstyled/core'\n","import { useMemo, useContext } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { th } from '@xstyled/system'\n\nexport const useTheme = () => {\n  return useContext(ThemeContext)\n}\n\nconst createUseGetter = (getter: Function) => (\n  value: any,\n  defaultValue?: any,\n) => {\n  const theme = useTheme()\n  return useMemo(() => getter(value, defaultValue)({ theme }), [\n    value,\n    defaultValue,\n    theme,\n  ])\n}\n\nexport const useTh = createUseGetter(th)\n\nexport const useAngle = createUseGetter(th.angle)\nexport const useAnimation = createUseGetter(th.animation)\nexport const useBorder = createUseGetter(th.border)\nexport const useBorderColor = createUseGetter(th.borderColor)\nexport const useBorderStyle = createUseGetter(th.borderStyle)\nexport const useBorderWidth = createUseGetter(th.borderWidth)\nexport const useColor = createUseGetter(th.color)\nexport const useDuration = createUseGetter(th.duration)\nexport const useFont = createUseGetter(th.font)\nexport const useFontSize = createUseGetter(th.fontSize)\nexport const useFontWeight = createUseGetter(th.fontWeight)\nexport const useInset = createUseGetter(th.inset)\nexport const useLetterSpacing = createUseGetter(th.letterSpacing)\nexport const useLineHeight = createUseGetter(th.lineHeight)\nexport const usePercent = createUseGetter(th.percent)\nexport const usePx = createUseGetter(th.px)\nexport const useRadius = createUseGetter(th.radius)\nexport const useRingWidth = createUseGetter(th.ringWidth)\nexport const useShadow = createUseGetter(th.shadow)\nexport const useSize = createUseGetter(th.size)\nexport const useSpace = createUseGetter(th.space)\nexport const useTimingFunctions = createUseGetter(th.timingFunctions)\nexport const useTransform = createUseGetter(th.transform)\nexport const useTransition = createUseGetter(th.transition)\nexport const useTransitionProperty = createUseGetter(th.transitionProperty)\nexport const useZIndex = createUseGetter(th.zIndex)\n","import { createPreflight } from '@xstyled/system'\nimport { createGlobalStyle } from 'styled-components'\n\nexport const Preflight = createPreflight({ createGlobalStyle })\n","import { createGlobalStyle as scCreateGlobalStyle } from 'styled-components'\nimport { css } from './css'\n\nexport const createGlobalStyle = <P extends object = {}>(\n  ...args: Parameters<typeof scCreateGlobalStyle>\n): ReturnType<typeof scCreateGlobalStyle> => {\n  // @ts-ignore\n  return scCreateGlobalStyle<P>([css(...args)])\n}\n","import {\n  useThemeBreakpoints,\n  useThemeBreakpoint,\n  useThemeUp,\n  useThemeDown,\n} from '@xstyled/core'\nimport { useTheme } from './theme'\n\nexport { useViewportWidth } from '@xstyled/core'\n\nexport function useBreakpoints() {\n  return useThemeBreakpoints(useTheme())\n}\n\nexport function useBreakpoint() {\n  return useThemeBreakpoint(useTheme())\n}\n\nexport function useUp(key: string | number) {\n  return useThemeUp(useTheme(), key)\n}\n\nexport function useDown(key: string | number) {\n  return useThemeDown(useTheme(), key)\n}\n"],"names":["css","scCssArgs","scCss","flattenedArgs","flattenStrings","map","transform","tags","Object","keys","styled","createX","generator","x","extend","generators","compose","forEach","tag","withConfig","shouldForwardProp","prop","defaultValidatorFn","meta","props","includes","system","Box","div","component","getCreateStyle","baseCreateStyle","createStyle","attrs","config","scStyled","box","key","ColorModeStyle","createGlobalStyle","p","createColorStyles","theme","targetSelector","ColorModeProvider","createColorModeProvider","ThemeContext","ThemeProvider","useTheme","useContext","createUseGetter","getter","value","defaultValue","useMemo","useTh","th","useAngle","angle","useAnimation","animation","useBorder","border","useBorderColor","borderColor","useBorderStyle","borderStyle","useBorderWidth","borderWidth","useColor","color","useDuration","duration","useFont","font","useFontSize","fontSize","useFontWeight","fontWeight","useInset","inset","useLetterSpacing","letterSpacing","useLineHeight","lineHeight","usePercent","percent","usePx","px","useRadius","radius","useRingWidth","ringWidth","useShadow","shadow","useSize","size","useSpace","space","useTimingFunctions","timingFunctions","useTransform","useTransition","transition","useTransitionProperty","transitionProperty","useZIndex","zIndex","Preflight","createPreflight","scCreateGlobalStyle","useThemeBreakpoint","useThemeBreakpoints","useThemeDown","useThemeUp"],"mappings":"+QAKgBA,QAGRC,EAAYC,8BACZC,EAAgBC,iBAAeH,UAC9BE,EAAcE,IAAIC,gECT3B,QAKMC,EAAOC,OAAOC,KAAKC,GAMZC,EAAU,SAAVA,EAAkCC,OAevCC,EAAe,CACnBC,OAAQ,sCAAIC,2BAAAA,yBAAeJ,EAAQK,wBAAQJ,UAAcG,cAG3DR,EAAKU,SAAQ,SAACC,GAEZL,EAAEK,GAAOR,EAAOQ,GAAKC,WAAW,CAC9BC,kBAAmB,SAACC,EAAMC,UACJ,iBAATD,IAAqBT,EAAUW,KAAKC,MAAMC,SAASJ,KAEvDC,EAAmBD,KAJrBX,EAME,iBAAM,OAAQE,aAGpBC,GCtCIA,EAAIF,EAEfe,UAGWC,EAAMd,EAAEe,IC+BRlB,EACV,SAACmB,UA7BJ,SAASC,EAAeC,OAEhBC,EAAc,kBAAkBD,oBAAkB/B,mCACxDgC,EAAYC,MAAQ,SAACA,UAEZH,EADiBC,EAAgBE,MAAMA,KAGhDD,EAAYb,WAAa,SAACe,UAEjBJ,EADiBC,EAAgBZ,WAAWe,KAG9CF,EAkBcF,CAAeK,EAASN,KAI/CnB,EAAO0B,IAAM1B,EAAOG,EAAEe,KAEtBpB,OAAOC,KAAK0B,GAAUlB,SAAQ,SAACoB,GAE7B3B,EAAO2B,GAAO3B,EAAO2B,GAErB3B,EAAU2B,SAAY3B,EAAOG,EAAEwB,WC5C3BC,EAAiBC,uCAAoB,SAACC,UAGtCC,oBAAkBD,EAAEE,MAAO,CAAEC,eAAgBH,EAAEG,oBAExCC,EAAoBC,0BAAwB,CACvDC,aAAAA,eACAC,cAAAA,gBACAT,eAAAA,ICXWU,EAAW,kBACfC,aAAWH,iBAGdI,EAAkB,SAACC,UAAqB,SAC5CC,EACAC,OAEMX,EAAQM,WACPM,WAAQ,kBAAMH,EAAOC,EAAOC,EAAdF,CAA4B,CAAET,MAAAA,MAAU,CAC3DU,EACAC,EACAX,MAISa,EAAQL,EAAgBM,MAExBC,EAAWP,EAAgBM,KAAGE,OAC9BC,EAAeT,EAAgBM,KAAGI,WAClCC,EAAYX,EAAgBM,KAAGM,QAC/BC,EAAiBb,EAAgBM,KAAGQ,aACpCC,EAAiBf,EAAgBM,KAAGU,aACpCC,EAAiBjB,EAAgBM,KAAGY,aACpCC,EAAWnB,EAAgBM,KAAGc,OAC9BC,EAAcrB,EAAgBM,KAAGgB,UACjCC,EAAUvB,EAAgBM,KAAGkB,MAC7BC,EAAczB,EAAgBM,KAAGoB,UACjCC,EAAgB3B,EAAgBM,KAAGsB,YACnCC,EAAW7B,EAAgBM,KAAGwB,OAC9BC,EAAmB/B,EAAgBM,KAAG0B,eACtCC,EAAgBjC,EAAgBM,KAAG4B,YACnCC,EAAanC,EAAgBM,KAAG8B,SAChCC,EAAQrC,EAAgBM,KAAGgC,IAC3BC,EAAYvC,EAAgBM,KAAGkC,QAC/BC,EAAezC,EAAgBM,KAAGoC,WAClCC,EAAY3C,EAAgBM,KAAGsC,QAC/BC,EAAU7C,EAAgBM,KAAGwC,MAC7BC,EAAW/C,EAAgBM,KAAG0C,OAC9BC,EAAqBjD,EAAgBM,KAAG4C,iBACxCC,EAAenD,EAAgBM,KAAGlD,WAClCgG,EAAgBpD,EAAgBM,KAAG+C,YACnCC,EAAwBtD,EAAgBM,KAAGiD,oBAC3CC,EAAYxD,EAAgBM,KAAGmD,QC5C/BC,EAAYC,kBAAgB,CAAEtE,kBAAAA,y/CCAV,kBAIxBuE,oBAAuB,CAAC9G,8OCOjC,kBACS+G,qBAAmB/D,+CAJnBgE,sBAAoBhE,kDAWLX,UACf4E,eAAajE,IAAYX,+cALZA,UACb6E,aAAWlE,IAAYX"}