(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
	(factory((global.MDXObservable = {}),global.React));
}(this, (function (exports,React) { 'use strict';

React = React && React.hasOwnProperty('default') ? React['default'] : React;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var StoreContext = React.createContext({ setState: function setState() {} });

// provides {...state, setState} as context as well as render prop
// if the children prop is a function

var State = function (_React$Component) {
  inherits(State, _React$Component);

  function State() {
    var _temp, _this, _ret;

    classCallCheck(this, State);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = _extends({}, _this.props.initialState, {
      setState: function setState(update) {
        return _this.setState(update);
      }
    }), _temp), possibleConstructorReturn(_this, _ret);
  }

  State.prototype.render = function render() {
    return React.createElement(
      StoreContext.Provider,
      { value: this.state },
      React.createElement(
        React.Fragment,
        null,
        typeof this.props.children === "function" ? this.props.children(this.state) : this.props.children
      )
    );
  };

  return State;
}(React.Component);

State.defaultProps = {
  initialState: {}
};

var Observe = function (_React$Component2) {
  inherits(Observe, _React$Component2);

  function Observe() {
    classCallCheck(this, Observe);
    return possibleConstructorReturn(this, _React$Component2.apply(this, arguments));
  }

  Observe.prototype.render = function render() {
    var children = this.props.children;

    return React.createElement(
      StoreContext.Consumer,
      null,
      function (store) {
        return children(store);
      }
    );
  };

  return Observe;
}(React.Component);

exports.State = State;
exports.Observe = Observe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
