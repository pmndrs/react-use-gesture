import * as CSS from 'csstype';
import { ColorGetter } from './colors';
import { SystemProp, Theme, ITheme } from '../types';
declare type FillProp<T extends ITheme = Theme> = SystemProp<ColorGetter<T> | CSS.Property.Fill, T>;
export interface FillProps<T extends ITheme = Theme> {
    fill?: FillProp<T>;
    motionSafeFill?: FillProp<T>;
    motionReduceFill?: FillProp<T>;
    firstFill?: FillProp<T>;
    lastFill?: FillProp<T>;
    oddFill?: FillProp<T>;
    evenFill?: FillProp<T>;
    visitedFill?: FillProp<T>;
    checkedFill?: FillProp<T>;
    focusWithinFill?: FillProp<T>;
    hoverFill?: FillProp<T>;
    focusFill?: FillProp<T>;
    focusVisibleFill?: FillProp<T>;
    activeFill?: FillProp<T>;
    disabledFill?: FillProp<T>;
    placeholderFill?: FillProp<T>;
}
export declare const fill: import("../types").StyleGenerator;
declare type StrokeProp<T extends ITheme = Theme> = SystemProp<ColorGetter<T> | CSS.Property.Stroke, T>;
export interface StrokeProps<T extends ITheme = Theme> {
    stroke?: StrokeProp<T>;
    motionSafeStroke?: StrokeProp<T>;
    motionReduceStroke?: StrokeProp<T>;
    firstStroke?: StrokeProp<T>;
    lastStroke?: StrokeProp<T>;
    oddStroke?: StrokeProp<T>;
    evenStroke?: StrokeProp<T>;
    visitedStroke?: StrokeProp<T>;
    checkedStroke?: StrokeProp<T>;
    focusWithinStroke?: StrokeProp<T>;
    hoverStroke?: StrokeProp<T>;
    focusStroke?: StrokeProp<T>;
    focusVisibleStroke?: StrokeProp<T>;
    activeStroke?: StrokeProp<T>;
    disabledStroke?: StrokeProp<T>;
    placeholderStroke?: StrokeProp<T>;
}
export declare const stroke: import("../types").StyleGenerator;
export interface SvgProps<T extends ITheme = Theme> extends FillProps<T>, StrokeProps<T> {
}
export declare const svg: import("../types").StyleGenerator;
export {};
