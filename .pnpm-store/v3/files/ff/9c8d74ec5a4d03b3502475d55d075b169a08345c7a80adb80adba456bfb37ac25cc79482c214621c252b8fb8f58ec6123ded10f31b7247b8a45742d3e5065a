import { num, string, getThemeValue, is, negative, warn, merge, assign, func, obj, identity, cascade } from '@xstyled/util';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var round = function round(value) {
  return Math.round(value * Math.pow(10, 4)) / Math.pow(10, 4);
};

var unit = function unit(_unit) {
  return function (value) {
    return num(value) && value !== 0 ? "" + value + _unit : value;
  };
};
var ms = /*#__PURE__*/unit('ms');
var px = /*#__PURE__*/unit('px');
var deg = /*#__PURE__*/unit('deg');

var pxToRem = function pxToRem(value, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$rootFontSize = _ref.rootFontSize,
      rootFontSize = _ref$rootFontSize === void 0 ? 16 : _ref$rootFontSize;

  return round(value / rootFontSize);
};

var remPx = function remPx(value, options) {
  return num(value) && value !== 0 ? pxToRem(value, options) + "rem" : value;
};
var rpx = function rpx(value, options) {
  if (!string(value) || value.length < 4) return value;
  var unit = value.slice(-3);
  if (unit !== 'rpx') return value;
  var n = Number(value.slice(0, value.length - 3));
  if (n === 0) return 0;
  return pxToRem(n, options) + "rem";
};
var percent = function percent(n) {
  return num(n) && n !== 0 && n >= -1 && n <= 1 ? round(n * 100) + "%" : n;
};

function toNegative(value) {
  if (string(value)) return "-" + value;
  return value * -1;
}

var transformNegative = function transformNegative(_, _ref2) {
  var rawValue = _ref2.rawValue,
      variants = _ref2.variants,
      props = _ref2.props;

  if (string(rawValue)) {
    var _neg = rawValue.startsWith('-');

    var absoluteValue = _neg ? rawValue.substr(1) : rawValue;
    var variantValue = getThemeValue(props, absoluteValue, variants);

    var _value = is(variantValue) ? variantValue : absoluteValue;

    return _neg ? toNegative(_value) : _value;
  }

  var abs = Math.abs(rawValue);
  var neg = negative(rawValue);
  var value = is(variants && variants[abs]) ? variants[abs] : abs;
  return neg ? toNegative(value) : value;
};

function getBreakpoints(props) {
  var themeBreakpoints = getThemeValue(props, 'screens');
  if (is(themeBreakpoints)) return themeBreakpoints;
  return {};
}
var mediaMinWidth = function mediaMinWidth(value) {
  return value ? "@media (min-width: " + value + ")" : null;
};
var mediaMaxWidth = function mediaMaxWidth(value) {
  return value ? "@media (max-width: " + value + ")" : null;
};
var mediaBetweenWidth = function mediaBetweenWidth(min, max) {
  return min && max ? "@media (min-width: " + min + ") and (max-width: " + max + ")" : null;
};
/**
 * Minimum breakpoint width.
 * Null for the smallest breakpoint.
 */

var getBreakpointMin = function getBreakpointMin(breakpoints, key) {
  var value = breakpoints[key];
  return value === 0 ? null : px(value);
};
/**
 * Maximum breakpoint width. Null for the largest (last) breakpoint.
 * The maximum value is calculated as the minimum of the next one less 0.02px
 * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
 * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
 * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
 * See https://bugs.webkit.org/show_bug.cgi?id=178261
 */

var getBreakpointMax = function getBreakpointMax(breakpoints, key) {
  var breakPoint = breakpoints[key];
  return breakPoint === 0 ? null : px(breakPoint - 0.02);
};

var defaultStates = {
  motionSafe: '@media (prefers-reduced-motion: no-preference)',
  motionReduce: '@media (prefers-reduced-motion: reduce)',
  first: '&:first-child',
  last: '&:last-child',
  odd: '&:odd',
  even: '&:even',
  visited: '&:visited',
  checked: '&:checked',
  focusWithin: '&:focus-within',
  hover: '&:hover',
  focus: '&:focus',
  focusVisible: '&:focus-visible',
  active: '&:active',
  disabled: '&:disabled',
  placeholder: '&::placeholder'
};

var defaultStateKeys = /*#__PURE__*/Object.keys(defaultStates);
var cacheSupported = typeof Map !== 'undefined' && typeof WeakMap !== 'undefined';
var caches = cacheSupported ? /*#__PURE__*/new WeakMap() : null;

function getThemeCache(theme) {
  if (caches === null) return null;
  if (caches.has(theme)) return caches.get(theme);
  var cache = {};
  caches.set(theme, cache);
  return cache;
}

var noopCache = {
  has: function has() {
    return false;
  },
  set: function set() {},
  get: function get() {}
};

function getCacheNamespace(theme, namespace) {
  if (!theme) return noopCache;
  var cache = getThemeCache(theme);
  if (!cache || !theme) return noopCache;
  cache[namespace] = cache[namespace] || new Map();
  return cache[namespace];
}

var themeGetterId = 0;
var SPACES = /\s+/;
var themeGetter = function themeGetter(_ref) {
  var name = _ref.name,
      defaultTransform = _ref.transform,
      key = _ref.key,
      defaultVariants = _ref.defaultVariants,
      compose = _ref.compose,
      shorthand = _ref.shorthand;
  var id = themeGetterId++;

  var getter = function getter(value, defaultValue) {
    return function (props) {
      var res = value;
      if (!string(value) && !num(value) && value !== true) return res;
      var cacheKey = value + "-" + defaultValue;
      var cache = getCacheNamespace(props.theme, "__themeGetter" + id);
      if (cache.has(cacheKey)) return cache.get(cacheKey);

      var getValue = function getValue(value) {
        var localDefaultValue = is(defaultValue) ? defaultValue : value;
        var res = value;
        var variants = is(key) ? getThemeValue(props, key) : null;
        variants = is(variants) ? variants : defaultVariants;

        if (is(variants)) {
          // @ts-ignore
          res = getThemeValue(props, value === true ? 'default' : value, variants);
          res = Array.isArray(res) ? res.join(',') : res;
        }

        var rawValue = value;

        if (!is(res)) {
          rawValue = localDefaultValue;
          res = localDefaultValue;
        }

        var transform = (name && props.theme && props.theme.transformers ? props.theme.transformers[name] : null) || defaultTransform;

        if (transform) {
          res = transform(res, {
            rawValue: rawValue,
            variants: variants,
            props: props
          });
        }

        return compose ? compose(res)(props) : res;
      };

      if (shorthand && string(value)) {
        var values = value.split(SPACES); // @ts-ignore

        res = values.map(function (value) {
          return getValue(value);
        }).join(' ');
      } else {
        res = getValue(value);
      }

      cache.set(cacheKey, res);
      return res;
    };
  };

  getter.meta = {
    name: name,
    transform: defaultTransform
  };
  return getter;
};
function createStyleGenerator(getStyle, props, generators) {
  var generator = getStyle;
  generator.meta = {
    props: props,
    getStyle: generator,
    generators: generators
  };

  generator.apply = function (values) {
    return function (_ref2) {
      var theme = _ref2.theme;
      return generator(_extends({
        theme: theme
      }, values));
    };
  };

  return generator;
}

function getMedias(props) {
  var breakpoints = getBreakpoints(props);
  var medias = {};

  for (var breakpoint in breakpoints) {
    medias[breakpoint] = mediaMinWidth(getBreakpointMin(breakpoints, breakpoint));
  }

  return medias;
}

function getCachedMedias(props, cache) {
  if (cache.has('_medias')) {
    return cache.get('_medias');
  }

  var medias = getMedias(props);
  cache.set('_medias', medias);
  return medias;
}

function reduceBreakpoints(props, values, getStyle, cache) {
  if (getStyle === void 0) {
    getStyle = identity;
  }

  var medias = cache ? getCachedMedias(props, cache) : getMedias(props);
  var styles = {};

  for (var breakpoint in values) {
    var _style = getStyle(values[breakpoint]);

    if (_style === null) continue;
    var media = medias[breakpoint];

    if (media === null) {
      styles = merge(styles, _style);
    } else {
      styles[media] = styles[media] ? assign(styles[media], _style) : _style;
    }
  }

  return styles;
}

function styleFromValue(mixin, value, props, themeGet, cache) {
  if (obj(value)) return null;
  if (cache.has(value)) return cache.get(value);
  var computedValue = themeGet(value)(props);
  var style = cascade(mixin(computedValue), props);
  cache.set(value, style);
  return style;
}

function getStyleFactory(prop, mixin, themeGet) {
  return function getStyle(props) {
    var value = props[prop];
    if (!is(value)) return null;
    var cache = getCacheNamespace(props.theme, prop);

    if (obj(value)) {
      return reduceBreakpoints(props, value, function (breakpointValue) {
        return styleFromValue(mixin, breakpointValue, props, themeGet, cache);
      }, cache);
    }

    return styleFromValue(mixin, value, props, themeGet, cache);
  };
}

function scopeStyleGetter(selector, getStyle) {
  return function (props) {
    var _ref3;

    var result = getStyle(props);
    if (result === null) return result;
    return _ref3 = {}, _ref3[selector] = result, _ref3;
  };
}

function indexGeneratorsByProp(styles) {
  var index = {};

  for (var i = 0; i < styles.length; i++) {
    var _style2 = styles[i];

    if (_style2 && _style2.meta) {
      for (var j = 0; j < _style2.meta.props.length; j++) {
        var prop = _style2.meta.props[j];
        index[prop] = _style2;
      }
    }
  }

  return index;
}

function sortStyles(styles, medias) {
  for (var key in medias) {
    var mediaValue = medias[key];
    var s = styles[mediaValue];
    if (!s) continue;
    delete styles[mediaValue];
    styles[mediaValue] = s;
  }

  return styles;
}

function compose() {
  var flatGenerators = [];

  for (var _len = arguments.length, generators = new Array(_len), _key = 0; _key < _len; _key++) {
    generators[_key] = arguments[_key];
  }

  generators.forEach(function (gen) {
    warn(Boolean(gen), "Undefined generator in \"compose\" method");
    if (!gen) return;

    if (gen.meta.generators) {
      flatGenerators = [].concat(flatGenerators, gen.meta.generators);
    } else {
      flatGenerators.push(gen);
    }
  });
  var generatorsByProp = indexGeneratorsByProp(flatGenerators);

  function getStyle(props, sort) {
    if (sort === void 0) {
      sort = true;
    }

    var styles = {};

    for (var key in props) {
      var generator = generatorsByProp[key];

      if (generator) {
        var _style3 = generator.meta.getStyle(props, false);

        merge(styles, _style3);
      }
    }

    if (!sort) return styles;
    var medias = getCachedMedias(props, getCacheNamespace(props.theme, '__medias'));
    return sortStyles(styles, medias);
  }

  var props = flatGenerators.reduce(function (allProps, generator) {
    return [].concat(allProps, generator.meta.props);
  }, []);
  return createStyleGenerator(getStyle, props, generators);
}

var getMixinFromCSSProperties = function getMixinFromCSSProperties(properties) {
  return function (value) {
    var _ref4;

    if (!string(value) && !num(value)) return null;
    if (string(properties)) return _ref4 = {}, _ref4[properties] = value, _ref4;
    var style = {};

    for (var key in properties) {
      style[properties[key]] = value;
    }

    return style;
  };
};

var getMixinFromCSSProperty = function getMixinFromCSSProperty(cssProperty) {
  if (func(cssProperty)) return cssProperty;
  return getMixinFromCSSProperties(cssProperty);
};

function style(_ref5) {
  var prop = _ref5.prop,
      cssProperty = _ref5.cssProperty,
      key = _ref5.key,
      transform = _ref5.transform,
      themeGet = _ref5.themeGet,
      _ref5$states = _ref5.states,
      states = _ref5$states === void 0 ? defaultStates : _ref5$states;

  if (Array.isArray(prop)) {
    var _mixin = cssProperty ? getMixinFromCSSProperty(cssProperty) : cssProperty;

    var _generators = prop.map(function (prop) {
      return style({
        prop: prop,
        cssProperty: _mixin,
        key: key,
        transform: transform,
        themeGet: themeGet
      });
    }); // @ts-ignore


    return compose.apply(void 0, _generators);
  }

  var mixin = getMixinFromCSSProperty(cssProperty || [prop]);
  themeGet = themeGet || themeGetter({
    key: key,
    transform: transform
  });
  var capitalizedProp = prop.charAt(0).toUpperCase() + prop.slice(1);
  var generators = [];
  var stateNames = states === defaultStates ? defaultStateKeys : Object.keys(states);

  for (var i = 0; i < stateNames.length; i++) {
    var stateName = stateNames[i];
    var stateProp = "" + stateName + capitalizedProp;

    var _getStyle = scopeStyleGetter(states[stateName], getStyleFactory(stateProp, mixin, themeGet));

    var _generator = createStyleGenerator(_getStyle, [stateProp]);

    generators.push(_generator);
  }

  var getStyle = getStyleFactory(prop, mixin, themeGet);
  var generator = createStyleGenerator(getStyle, [prop]);
  generators.push(generator); // @ts-ignore

  return compose.apply(void 0, generators);
}

var getAnimation = /*#__PURE__*/themeGetter({
  name: 'animation',
  key: 'animations'
});
var animation = /*#__PURE__*/style({
  prop: 'animation',
  themeGet: getAnimation
});
var animations = /*#__PURE__*/compose(animation);

var getColor = /*#__PURE__*/themeGetter({
  name: 'color',
  key: 'colors'
});

var gradientBackgrounds = {
  'gradient-to-t': 'linear-gradient(to top, var(--x-gradient-stops))',
  'gradient-to-tr': 'linear-gradient(to top right, var(--x-gradient-stops))',
  'gradient-to-r': 'linear-gradient(to right, var(--x-gradient-stops))',
  'gradient-to-br': 'linear-gradient(to bottom right, var(--x-gradient-stops))',
  'gradient-to-b': 'linear-gradient(to bottom, var(--x-gradient-stops))',
  'gradient-to-bl': 'linear-gradient(to bottom left, var(--x-gradient-stops))',
  'gradient-to-l': 'linear-gradient(to left, var(--x-gradient-stops))',
  'gradient-to-tl': 'linear-gradient(to top left, var(--x-gradient-stops))'
};
var background = /*#__PURE__*/style({
  prop: 'background',
  cssProperty: function cssProperty(value) {
    return {
      background: gradientBackgrounds[value] || value
    };
  }
});
var backgroundColor = /*#__PURE__*/style({
  prop: ['backgroundColor', 'bg'],
  cssProperty: 'backgroundColor',
  themeGet: getColor
});
var backgroundImage = /*#__PURE__*/style({
  prop: 'backgroundImage',
  cssProperty: function cssProperty(value) {
    return {
      backgroundImage: gradientBackgrounds[value] || value
    };
  }
});
var backgroundSize = /*#__PURE__*/style({
  prop: 'backgroundSize'
});
var backgroundPosition = /*#__PURE__*/style({
  prop: 'backgroundPosition'
});
var backgroundRepeat = /*#__PURE__*/style({
  prop: 'backgroundRepeat'
});
var backgroundAttachment = /*#__PURE__*/style({
  prop: 'backgroundAttachment'
});
var backgroundClip = /*#__PURE__*/style({
  prop: 'backgroundClip',
  cssProperty: ['backgroundClip', '-webkitBackgroundClip']
});
var gradientFrom = /*#__PURE__*/style({
  prop: 'gradientFrom',
  themeGet: getColor,
  cssProperty: function cssProperty(value) {
    return {
      '--x-gradient-from': value,
      '--x-gradient-stops': 'var(--x-gradient-from), var(--x-gradient-to, transparent)'
    };
  }
});
var gradientVia = /*#__PURE__*/style({
  prop: 'gradientVia',
  themeGet: getColor,
  cssProperty: function cssProperty(value) {
    return {
      '--x-gradient-stops': "var(--x-gradient-from), " + value + ", var(--x-gradient-to, transparent)"
    };
  }
});
var gradientTo = /*#__PURE__*/style({
  prop: 'gradientTo',
  themeGet: getColor,
  cssProperty: '--x-gradient-to'
});
var backgrounds = /*#__PURE__*/compose(background, backgroundColor, backgroundImage, backgroundSize, backgroundPosition, backgroundRepeat, backgroundAttachment, backgroundClip, gradientFrom, gradientVia, gradientTo);

var getPx = /*#__PURE__*/themeGetter({
  name: 'px',
  transform: function transform(value, _ref) {
    var _props$theme$settings, _props$theme, _props$theme$settings2;

    var props = _ref.props;
    var rootFontSize = (_props$theme$settings = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : (_props$theme$settings2 = _props$theme.settings) == null ? void 0 : _props$theme$settings2.rootFontSize) != null ? _props$theme$settings : undefined;
    var num = Number(value);
    return px(rpx(Number.isNaN(num) ? value : num, {
      rootFontSize: rootFontSize
    }));
  }
});
var getDuration = /*#__PURE__*/themeGetter({
  name: 'duration',
  key: 'durations',
  transform: function transform(value) {
    var num = Number(value);
    return ms(Number.isNaN(num) ? value : num);
  }
});
var getAngle = /*#__PURE__*/themeGetter({
  name: 'angle',
  transform: function transform(value) {
    var num = Number(value);
    return deg(Number.isNaN(num) ? value : num);
  }
});
var getPercent = /*#__PURE__*/themeGetter({
  name: 'percent',
  transform: percent,
  compose: getPx
});

var getBorder = /*#__PURE__*/themeGetter({
  name: 'border',
  key: 'borders',
  transform: function transform(n) {
    return num(n) && n > 0 ? px(n) + " solid" : n;
  }
});
var getBorderWidth = /*#__PURE__*/themeGetter({
  name: 'borderWidth',
  key: 'borderWidths',
  compose: getPx,
  shorthand: true
});
var getBorderColor = /*#__PURE__*/themeGetter({
  name: 'borderColor',
  compose: getColor,
  shorthand: true
});
var getBorderStyle = /*#__PURE__*/themeGetter({
  name: 'borderStyle',
  key: 'borderStyles'
});
var border = /*#__PURE__*/style({
  prop: 'border',
  themeGet: getBorder
});
var borderTop = /*#__PURE__*/style({
  prop: 'borderTop',
  themeGet: getBorder
});
var borderRight = /*#__PURE__*/style({
  prop: 'borderRight',
  themeGet: getBorder
});
var borderBottom = /*#__PURE__*/style({
  prop: 'borderBottom',
  themeGet: getBorder
});
var borderLeft = /*#__PURE__*/style({
  prop: 'borderLeft',
  themeGet: getBorder
});
var borderColor = /*#__PURE__*/style({
  prop: 'borderColor',
  themeGet: getBorderColor
});
var borderTopColor = /*#__PURE__*/style({
  prop: 'borderTopColor',
  themeGet: getBorderColor
});
var borderRightColor = /*#__PURE__*/style({
  prop: 'borderRightColor',
  themeGet: getBorderColor
});
var borderBottomColor = /*#__PURE__*/style({
  prop: 'borderBottomColor',
  themeGet: getBorderColor
});
var borderLeftColor = /*#__PURE__*/style({
  prop: 'borderLeftColor',
  themeGet: getBorderColor
});
var borderWidth = /*#__PURE__*/style({
  prop: 'borderWidth',
  themeGet: getBorderWidth
});
var borderTopWidth = /*#__PURE__*/style({
  prop: 'borderTopWidth',
  themeGet: getBorderWidth
});
var borderRightWidth = /*#__PURE__*/style({
  prop: 'borderRightWidth',
  themeGet: getBorderWidth
});
var borderBottomWidth = /*#__PURE__*/style({
  prop: 'borderBottomWidth',
  themeGet: getBorderWidth
});
var borderLeftWidth = /*#__PURE__*/style({
  prop: 'borderLeftWidth',
  themeGet: getBorderWidth
});
var borderStyle = /*#__PURE__*/style({
  prop: 'borderStyle',
  themeGet: getBorderStyle
});
var outline = /*#__PURE__*/style({
  prop: 'outline',
  themeGet: getBorder
});
var outlineColor = /*#__PURE__*/style({
  prop: 'outlineColor',
  themeGet: getColor
});
var outlineWidth = /*#__PURE__*/style({
  prop: 'outlineWidth',
  themeGet: getBorderWidth
});
var outlineStyle = /*#__PURE__*/style({
  prop: 'outlineStyle',
  themeGet: getBorderStyle
});
var getRadius = /*#__PURE__*/themeGetter({
  name: 'radius',
  key: 'radii',
  compose: getPx,
  shorthand: true
});
var borderRadius = /*#__PURE__*/style({
  prop: 'borderRadius',
  themeGet: getRadius
}); // Divide

var divideSelector = "& > :not([hidden]) ~ :not([hidden])";
var divideY = /*#__PURE__*/style({
  prop: 'divideY',
  themeGet: getBorderWidth,
  cssProperty: function cssProperty(value) {
    var _ref;

    var v = value === true ? 1 : value;
    return _ref = {}, _ref[divideSelector] = {
      '--x-divide-y-reverse': 0,
      borderTopWidth: "calc(" + v + " * calc(1 - var(--x-divide-y-reverse)))",
      borderBottomWidth: "calc(" + v + " * var(--x-divide-y-reverse))"
    }, _ref;
  }
});
var divideX = /*#__PURE__*/style({
  prop: 'divideX',
  themeGet: getBorderWidth,
  cssProperty: function cssProperty(value) {
    var _ref2;

    var v = value === true ? 1 : value;
    return _ref2 = {}, _ref2[divideSelector] = {
      '--x-divide-x-reverse': 0,
      borderRightWidth: "calc(" + v + " * var(--x-divide-x-reverse))",
      borderLeftWidth: "calc(" + v + " * calc(1 - var(--x-divide-x-reverse)))"
    }, _ref2;
  }
});
var divideXReverse = /*#__PURE__*/style({
  prop: 'divideXReverse',
  cssProperty: function cssProperty() {
    var _ref3;

    return _ref3 = {}, _ref3[divideSelector] = {
      '--x-divide-x-reverse': '1'
    }, _ref3;
  }
});
var divideYReverse = /*#__PURE__*/style({
  prop: 'divideYReverse',
  cssProperty: function cssProperty() {
    var _ref4;

    return _ref4 = {}, _ref4[divideSelector] = {
      '--x-divide-y-reverse': '1'
    }, _ref4;
  }
});
var divideColor = /*#__PURE__*/style({
  prop: 'divideColor',
  themeGet: getBorderColor,
  cssProperty: function cssProperty(value) {
    var _ref5;

    return _ref5 = {}, _ref5[divideSelector] = {
      borderColor: value
    }, _ref5;
  }
});
var divideStyle = /*#__PURE__*/style({
  prop: 'divideStyle',
  themeGet: getBorderStyle,
  cssProperty: function cssProperty(value) {
    var _ref6;

    return _ref6 = {}, _ref6[divideSelector] = {
      borderStyle: value
    }, _ref6;
  }
});
var getRingWidth = /*#__PURE__*/themeGetter({
  name: 'ringWidth',
  key: 'ringWidths',
  compose: getPx
});
var ring = /*#__PURE__*/style({
  prop: 'ring',
  themeGet: getRingWidth,
  cssProperty: function cssProperty(value) {
    return {
      '--x-ring-shadow': "var(--x-ring-inset, /*!*/ /*!*/) 0 0 0 " + value + " var(--x-ring-color)",
      boxShadow: 'var(--x-ring-shadow, 0 0 #0000), var(--x-shadow, 0 0 #0000)'
    };
  }
});
var ringInset = /*#__PURE__*/style({
  prop: 'ringInset',
  cssProperty: function cssProperty() {
    return {
      '--x-ring-inset': 'inset'
    };
  }
});
var ringColor = /*#__PURE__*/style({
  prop: 'ringColor',
  themeGet: getColor,
  cssProperty: function cssProperty(value) {
    return {
      '--x-ring-color': value
    };
  }
});
var borders = /*#__PURE__*/compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderWidth, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth, borderStyle, borderRadius, outline, outlineColor, outlineWidth, outlineStyle, divideX, divideY, divideXReverse, divideYReverse, divideColor, divideStyle, ring, ringInset, ringColor);

var getShadow = /*#__PURE__*/themeGetter({
  name: 'shadow',
  key: 'shadows'
});
var opacity = /*#__PURE__*/style({
  prop: 'opacity'
});
var boxShadow = /*#__PURE__*/style({
  prop: 'boxShadow',
  themeGet: getShadow,
  cssProperty: function cssProperty(value) {
    return {
      '--x-shadow': value,
      boxShadow: 'var(--x-ring-shadow, 0 0 #0000), var(--x-shadow)'
    };
  }
});
var textShadow = /*#__PURE__*/style({
  prop: 'textShadow',
  themeGet: getShadow
});
var effects = /*#__PURE__*/compose(opacity, boxShadow, textShadow);

var row = /*#__PURE__*/style({
  prop: 'row',
  cssProperty: function cssProperty() {
    return {
      boxSizing: 'border-box',
      flexGrow: 1,
      flexWrap: 'wrap',
      display: 'flex'
    };
  }
});

function getColStyle(props, size) {
  if (size === true) {
    return {
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: '100%'
    };
  }

  if (size === 'auto') {
    return {
      flex: "0 0 auto",
      maxWidth: 'none',
      width: 'auto'
    };
  }

  var sizeWidth = getPercent(size)(props);
  return {
    flex: "0 0 " + sizeWidth,
    maxWidth: sizeWidth
  };
}

var col = /*#__PURE__*/createStyleGenerator(function (props) {
  var value = props.col;
  var common = {
    boxSizing: 'border-box',
    flexBasis: 0,
    flexGrow: 1,
    maxWidth: '100%'
  };

  if (obj(value)) {
    var breakpointsStyle = reduceBreakpoints(props, value, function (breakpointValue) {
      return getColStyle(props, breakpointValue);
    });
    return _extends({}, common, breakpointsStyle);
  }

  return _extends({}, common, getColStyle(props, value));
}, ['col']);
var flexboxGrids = /*#__PURE__*/compose(row, col);

var display = /*#__PURE__*/style({
  prop: 'display'
});

var _float = /*#__PURE__*/style({
  prop: 'float'
});
var boxSizing = /*#__PURE__*/style({
  prop: 'boxSizing'
});
var container = /*#__PURE__*/createStyleGenerator(function (props) {
  if (!props.container) return null;
  var breakpoints = getBreakpoints(props);
  var styles = reduceBreakpoints(props, breakpoints, function (breakpointValue) {
    return breakpointValue !== 0 ? {
      maxWidth: breakpointValue
    } : {};
  });

  if (obj(props.container)) {
    styles = reduceBreakpoints(props, props.container, function () {
      return styles;
    });
  }

  return _extends({
    width: '100%'
  }, styles);
}, ['container']);
var overflow = /*#__PURE__*/style({
  prop: 'overflow'
});
var overflowX = /*#__PURE__*/style({
  prop: 'overflowX'
});
var overflowY = /*#__PURE__*/style({
  prop: 'overflowY'
});
var getZIndex = /*#__PURE__*/themeGetter({
  name: 'zIndex',
  key: 'zIndices'
});
var zIndex = /*#__PURE__*/style({
  prop: 'zIndex',
  themeGet: getZIndex
});
var position = /*#__PURE__*/style({
  prop: 'position'
});
var getInset = /*#__PURE__*/themeGetter({
  name: 'inset',
  key: 'inset',
  compose: getPx,
  transform: transformNegative
});
var top = /*#__PURE__*/style({
  prop: 'top',
  themeGet: getInset
});
var right = /*#__PURE__*/style({
  prop: 'right',
  themeGet: getInset
});
var bottom = /*#__PURE__*/style({
  prop: 'bottom',
  themeGet: getInset
});
var left = /*#__PURE__*/style({
  prop: 'left',
  themeGet: getInset
});
var visibility = /*#__PURE__*/style({
  prop: 'visibility'
});
var overscrollBehavior = /*#__PURE__*/style({
  prop: 'overscrollBehavior'
});
var objectFit = /*#__PURE__*/style({
  prop: 'objectFit'
});
var layout = /*#__PURE__*/compose(boxSizing, display, _float, container, overflow, overflowX, overflowY, position, zIndex, top, right, bottom, left, visibility, overscrollBehavior, objectFit);

var alignItems = /*#__PURE__*/style({
  prop: 'alignItems'
});
var alignContent = /*#__PURE__*/style({
  prop: 'alignContent'
});
var justifyContent = /*#__PURE__*/style({
  prop: 'justifyContent'
});
var justifyItems = /*#__PURE__*/style({
  prop: 'justifyItems'
});
var flexWrap = /*#__PURE__*/style({
  prop: 'flexWrap'
});
var flexGrow = /*#__PURE__*/style({
  prop: 'flexGrow'
});
var flexShrink = /*#__PURE__*/style({
  prop: 'flexShrink'
});
var flexBasis = /*#__PURE__*/style({
  prop: 'flexBasis',
  themeGet: getPercent
});
var flexDirection = /*#__PURE__*/style({
  prop: 'flexDirection'
});
var flex = /*#__PURE__*/style({
  prop: 'flex'
});
var justifySelf = /*#__PURE__*/style({
  prop: 'justifySelf'
});
var alignSelf = /*#__PURE__*/style({
  prop: 'alignSelf'
});
var order = /*#__PURE__*/style({
  prop: 'order'
});
var flexboxes = /*#__PURE__*/compose(display, alignItems, alignContent, justifyContent, justifyItems, flexWrap, flexBasis, flexShrink, flexGrow, flexDirection, flex, justifySelf, alignSelf, order);

var getSpace = /*#__PURE__*/themeGetter({
  name: 'space',
  key: 'space',
  compose: getPx,
  transform: transformNegative
});
var margin = /*#__PURE__*/style({
  prop: ['margin', 'm'],
  cssProperty: 'margin',
  themeGet: getSpace
});
var marginTop = /*#__PURE__*/style({
  prop: ['marginTop', 'mt'],
  cssProperty: 'marginTop',
  themeGet: getSpace
});
var marginRight = /*#__PURE__*/style({
  prop: ['marginRight', 'mr'],
  cssProperty: 'marginRight',
  themeGet: getSpace
});
var marginBottom = /*#__PURE__*/style({
  prop: ['marginBottom', 'mb'],
  cssProperty: 'marginBottom',
  themeGet: getSpace
});
var marginLeft = /*#__PURE__*/style({
  prop: ['marginLeft', 'ml'],
  cssProperty: 'marginLeft',
  themeGet: getSpace
});
var mx = /*#__PURE__*/style({
  prop: 'mx',
  cssProperty: ['marginRight', 'marginLeft'],
  themeGet: getSpace
});
var my = /*#__PURE__*/style({
  prop: 'my',
  cssProperty: ['marginTop', 'marginBottom'],
  themeGet: getSpace
});
var padding = /*#__PURE__*/style({
  prop: ['padding', 'p'],
  cssProperty: 'padding',
  themeGet: getSpace
});
var paddingTop = /*#__PURE__*/style({
  prop: ['paddingTop', 'pt'],
  cssProperty: 'paddingTop',
  themeGet: getSpace
});
var paddingRight = /*#__PURE__*/style({
  prop: ['paddingRight', 'pr'],
  cssProperty: 'paddingRight',
  themeGet: getSpace
});
var paddingBottom = /*#__PURE__*/style({
  prop: ['paddingBottom', 'pb'],
  cssProperty: 'paddingBottom',
  themeGet: getSpace
});
var paddingLeft = /*#__PURE__*/style({
  prop: ['paddingLeft', 'pl'],
  cssProperty: 'paddingLeft',
  themeGet: getSpace
});
var px$1 = /*#__PURE__*/style({
  prop: 'px',
  cssProperty: ['paddingRight', 'paddingLeft'],
  themeGet: getSpace
});
var py = /*#__PURE__*/style({
  prop: 'py',
  cssProperty: ['paddingTop', 'paddingBottom'],
  themeGet: getSpace
});
var spaceY = /*#__PURE__*/style({
  prop: 'spaceY',
  themeGet: getSpace,
  cssProperty: function cssProperty(value) {
    return {
      '& > :not([hidden]) ~ :not([hidden])': {
        '--x-space-y-reverse': 0,
        marginTop: "calc(" + value + " * calc(1 - var(--x-space-y-reverse)))",
        marginBottom: "calc(" + value + " * var(--x-space-y-reverse))"
      }
    };
  }
});
var spaceX = /*#__PURE__*/style({
  prop: 'spaceX',
  themeGet: getSpace,
  cssProperty: function cssProperty(value) {
    return {
      '& > :not([hidden]) ~ :not([hidden])': {
        '--x-space-x-reverse': 0,
        marginRight: "calc(" + value + " * var(--x-space-x-reverse))",
        marginLeft: "calc(" + value + " * calc(1 - var(--x-space-x-reverse)))"
      }
    };
  }
});
var spaceXReverse = /*#__PURE__*/style({
  prop: 'spaceXReverse',
  cssProperty: function cssProperty() {
    return {
      '& > :not([hidden]) ~ :not([hidden])': {
        '--x-space-x-reverse': '1'
      }
    };
  }
});
var spaceYReverse = /*#__PURE__*/style({
  prop: 'spaceYReverse',
  cssProperty: function cssProperty() {
    return {
      '& > :not([hidden]) ~ :not([hidden])': {
        '--x-space-y-reverse': '1'
      }
    };
  }
});
var space = /*#__PURE__*/compose(margin, marginTop, marginRight, marginBottom, marginLeft, mx, my, padding, paddingTop, paddingRight, paddingBottom, paddingLeft, px$1, py, spaceX, spaceY, spaceXReverse, spaceYReverse);

var gap = /*#__PURE__*/style({
  prop: 'gap',
  themeGet: getSpace
});
var columnGap = /*#__PURE__*/style({
  prop: 'columnGap',
  themeGet: getSpace
});
var rowGap = /*#__PURE__*/style({
  prop: 'rowGap',
  themeGet: getSpace
});
var gridColumn = /*#__PURE__*/style({
  prop: 'gridColumn'
});
var gridRow = /*#__PURE__*/style({
  prop: 'gridRow'
});
var gridAutoFlow = /*#__PURE__*/style({
  prop: 'gridAutoFlow'
});
var gridAutoColumns = /*#__PURE__*/style({
  prop: 'gridAutoColumns'
});
var gridAutoRows = /*#__PURE__*/style({
  prop: 'gridAutoRows'
});
var gridTemplateColumns = /*#__PURE__*/style({
  prop: 'gridTemplateColumns',
  key: 'gridTemplateColumns'
});
var gridTemplateRows = /*#__PURE__*/style({
  prop: 'gridTemplateRows',
  key: 'gridTemplateRows'
});
var gridTemplateAreas = /*#__PURE__*/style({
  prop: 'gridTemplateAreas'
});
var gridArea = /*#__PURE__*/style({
  prop: 'gridArea'
});
var grids = /*#__PURE__*/compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

var appearance = /*#__PURE__*/style({
  prop: 'appearance'
});
var cursor = /*#__PURE__*/style({
  prop: 'cursor'
});
var pointerEvents = /*#__PURE__*/style({
  prop: 'pointerEvents'
});
var resize = /*#__PURE__*/style({
  prop: 'resize'
});
var userSelect = /*#__PURE__*/style({
  prop: 'userSelect'
});
var interactivity = /*#__PURE__*/compose(appearance, cursor, pointerEvents, resize, userSelect);

var getSize = /*#__PURE__*/themeGetter({
  name: 'size',
  key: 'sizes',
  compose: getPercent
});
var width = /*#__PURE__*/style({
  prop: 'w',
  cssProperty: 'width',
  themeGet: getSize
});
var height = /*#__PURE__*/style({
  prop: 'h',
  cssProperty: 'height',
  themeGet: getSize
});
var maxWidth = /*#__PURE__*/style({
  cssProperty: 'maxWidth',
  prop: ['maxWidth', 'maxW'],
  themeGet: getSize
});
var maxHeight = /*#__PURE__*/style({
  cssProperty: 'maxHeight',
  prop: ['maxHeight', 'maxH'],
  themeGet: getSize
});
var minWidth = /*#__PURE__*/style({
  cssProperty: 'minWidth',
  prop: ['minWidth', 'minW'],
  themeGet: getSize
});
var minHeight = /*#__PURE__*/style({
  cssProperty: 'minHeight',
  prop: ['minHeight', 'minH'],
  themeGet: getSize
});
var sizing = /*#__PURE__*/compose(width, height, maxWidth, maxHeight, minWidth, minHeight);

var fill = /*#__PURE__*/style({
  prop: 'fill',
  themeGet: getColor
});
var stroke = /*#__PURE__*/style({
  prop: 'stroke',
  themeGet: getColor
});
var svg = /*#__PURE__*/compose(fill, stroke);

var borderCollapse = /*#__PURE__*/style({
  prop: 'borderCollapse'
});
var tableLayout = /*#__PURE__*/style({
  prop: 'tableLayout'
});
var tables = /*#__PURE__*/compose(borderCollapse, tableLayout);

var getTransform = /*#__PURE__*/themeGetter({
  name: 'transform',
  key: 'transforms'
});
var transform = /*#__PURE__*/style({
  prop: 'transform',
  themeGet: getTransform,
  cssProperty: function cssProperty(value) {
    if (value === true) {
      return {
        '--x-translate-x': 0,
        '--x-translate-y': 0,
        '--x-rotate': 0,
        '--x-skew-x': 0,
        '--x-skew-y': 0,
        '--x-scale-x': '1',
        '--x-scale-y': '1',
        transform: 'translate3d(var(--x-translate-x), var(--x-translate-y), 0) rotate(var(--x-rotate)) skewX(var(--x-skew-x)) skewY(var(--x-skew-y)) scaleX(var(--x-scale-x)) scaleY(var(--x-scale-y))'
      };
    }

    return {
      transform: value
    };
  }
});
var transformOrigin = /*#__PURE__*/style({
  prop: 'transformOrigin'
});
var translateX = /*#__PURE__*/style({
  prop: 'translateX',
  cssProperty: '--x-translate-x',
  themeGet: getSpace
});
var translateY = /*#__PURE__*/style({
  prop: 'translateY',
  cssProperty: '--x-translate-y',
  themeGet: getSpace
});
var rotate = /*#__PURE__*/style({
  prop: 'rotate',
  cssProperty: '--x-rotate',
  themeGet: getAngle
});
var skewX = /*#__PURE__*/style({
  prop: 'skewX',
  cssProperty: '--x-skew-x',
  themeGet: getAngle
});
var skewY = /*#__PURE__*/style({
  prop: 'skewY',
  cssProperty: '--x-skew-y',
  themeGet: getAngle
});
var scale = /*#__PURE__*/style({
  prop: 'scale',
  cssProperty: ['--x-scale-x', '--x-scale-y'],
  transform: function transform(v) {
    return String(v);
  }
});
var scaleX = /*#__PURE__*/style({
  prop: 'scaleX',
  cssProperty: '--x-scale-x',
  transform: function transform(v) {
    return String(v);
  }
});
var scaleY = /*#__PURE__*/style({
  prop: 'scaleY',
  cssProperty: '--x-scale-y',
  transform: function transform(v) {
    return String(v);
  }
});
var transforms = /*#__PURE__*/compose(transform, transformOrigin, translateX, translateY, rotate, skewX, skewY, scale, scaleX, scaleY);

var getTransition = /*#__PURE__*/themeGetter({
  name: 'transition',
  key: 'transitions'
});
var getTransitionProperty = /*#__PURE__*/themeGetter({
  name: 'transitionProperty',
  key: 'transitionProperties'
});
var getTimingFunction = /*#__PURE__*/themeGetter({
  name: 'timingFunctions',
  key: 'timingFunctions'
});
var transition = /*#__PURE__*/style({
  prop: 'transition',
  themeGet: getTransition
});
var transitionProperty = /*#__PURE__*/style({
  prop: 'transitionProperty',
  themeGet: getTransitionProperty
});
var transitionDuration = /*#__PURE__*/style({
  prop: 'transitionDuration',
  themeGet: getDuration
});
var transitionTimingFunction = /*#__PURE__*/style({
  prop: 'transitionTimingFunction',
  themeGet: getTimingFunction
});
var transitionDelay = /*#__PURE__*/style({
  prop: 'transitionDelay',
  themeGet: getDuration
});
var transitions = /*#__PURE__*/compose(transition, transitionProperty, transitionDuration, transitionTimingFunction, transitionDelay);

var getFont = /*#__PURE__*/themeGetter({
  name: 'font',
  key: 'fonts'
});
var getLineHeight = /*#__PURE__*/themeGetter({
  name: 'lineHeight',
  key: 'lineHeights',
  transform: function transform(value, _ref) {
    var _props$theme$settings, _props$theme, _props$theme$settings2;

    var props = _ref.props;
    var rootFontSize = (_props$theme$settings = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : (_props$theme$settings2 = _props$theme.settings) == null ? void 0 : _props$theme$settings2.rootFontSize) != null ? _props$theme$settings : undefined;
    return rpx(value, {
      rootFontSize: rootFontSize
    });
  }
});
var getFontWeight = /*#__PURE__*/themeGetter({
  name: 'fontWeight',
  key: 'fontWeights'
});
var getLetterSpacing = /*#__PURE__*/themeGetter({
  name: 'letterSpacing',
  key: 'letterSpacings',
  compose: getPx
});
var getFontSize = /*#__PURE__*/themeGetter({
  name: 'fontSize',
  key: 'fontSizes',
  compose: getPx
});
var fontFamily = /*#__PURE__*/style({
  prop: 'fontFamily',
  themeGet: getFont
});
var fontSize = /*#__PURE__*/style({
  prop: 'fontSize',
  themeGet: getFontSize
});
var lineHeight = /*#__PURE__*/style({
  prop: 'lineHeight',
  themeGet: getLineHeight
});
var fontWeight = /*#__PURE__*/style({
  prop: 'fontWeight',
  themeGet: getFontWeight
});
var fontStyle = /*#__PURE__*/style({
  prop: 'fontStyle'
});
var letterSpacing = /*#__PURE__*/style({
  prop: 'letterSpacing',
  themeGet: getLetterSpacing
});
var color = /*#__PURE__*/style({
  prop: 'color',
  themeGet: getColor
});
var textTransform = /*#__PURE__*/style({
  prop: 'textTransform'
});
var textDecoration = /*#__PURE__*/style({
  prop: 'textDecoration'
});
var textAlign = /*#__PURE__*/style({
  prop: 'textAlign'
});
var verticalAlign = /*#__PURE__*/style({
  prop: 'verticalAlign'
});
var whiteSpace = /*#__PURE__*/style({
  prop: 'whiteSpace'
});
var textOverflow = /*#__PURE__*/style({
  prop: 'textOverflow'
});
var listStyleType = /*#__PURE__*/style({
  prop: 'listStyleType'
});
var listStylePosition = /*#__PURE__*/style({
  prop: 'listStylePosition'
});
var typography = /*#__PURE__*/compose(fontFamily, fontSize, fontStyle, lineHeight, fontWeight, textAlign, letterSpacing, color, textTransform, textDecoration, verticalAlign, whiteSpace, textOverflow, listStyleType, listStylePosition);

var system = /*#__PURE__*/compose(animations, backgrounds, borders, effects, flexboxGrids, flexboxes, grids, interactivity, layout, sizing, space, svg, tables, transforms, transitions, typography);

var th = function th(path, defaultValue) {
  return function (props) {
    var value = getThemeValue(props, path);
    if (is(value)) return value;
    if (is(defaultValue)) return defaultValue;
    return path;
  };
};
[getAngle, getAnimation, getBorder, getBorderColor, getBorderStyle, getBorderWidth, getColor, getDuration, getFont, getFontSize, getFontWeight, getInset, getLetterSpacing, getLineHeight, getPercent, getPx, getRadius, getRingWidth, getShadow, getSize, getSpace, getTimingFunction, getTransform, getTransition, getTransitionProperty, getZIndex].forEach(function (themeGetter) {
  if (themeGetter.meta.name) {
    th[themeGetter.meta.name] = themeGetter;
  }
});

var up = function up(key, rules) {
  return function (props) {
    var breakpoints = getBreakpoints(props);
    var value = getBreakpointMin(breakpoints, key);
    if (value === null) return rules;
    return [mediaMinWidth(value) + " {", rules, '}'];
  };
};
var down = function down(key, rules) {
  return function (props) {
    var breakpoints = getBreakpoints(props);
    var value = getBreakpointMax(breakpoints, key);
    if (value === null) return null;
    return [mediaMaxWidth(value) + " {", rules, '}'];
  };
};
var between = function between(lower, upper, rules) {
  return function (props) {
    var breakpoints = getBreakpoints(props);
    var min = getBreakpointMin(breakpoints, lower);
    var max = getBreakpointMax(breakpoints, upper);
    if (max === null) return up(lower, rules)(props);
    if (min === null) return down(upper, rules)(props);
    return [mediaBetweenWidth(min, max) + " {", rules, '}'];
  };
};
var breakpoints = function breakpoints(values) {
  return function (props) {
    var allRules = [];
    var keys = Object.keys(values);
    var keysLength = keys.length;

    for (var i = 0; i < keysLength; i++) {
      var key = keys[i];
      var rules = values[key];
      var result = up(key, rules)(props);

      if (Array.isArray(result)) {
        result.forEach(function (v) {
          return allRules.push(v);
        });
      } else {
        allRules.push(result);
      }
    }

    return allRules;
  };
};

var rpxTransformers = {
  px: function px(value) {
    return remPx(rpx(value));
  },
  border: function border(n) {
    return num(n) && n > 0 ? remPx(n) + " solid" : n;
  }
};

var defaultAlphaVariants = [0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100];

function generateAlphaVariants(colors, transform, variants) {
  if (transform === void 0) {
    transform = function transform(x) {
      return x;
    };
  }

  if (variants === void 0) {
    variants = defaultAlphaVariants;
  }

  var alphaColors = Object.keys(colors).reduce(function (obj, key) {
    variants.forEach(function (i) {
      obj[key + "-a" + i] = transform(colors[key], key, i);
    });
    return obj;
  }, _extends({}, colors));
  return alphaColors;
}

function generateHexAlphaVariants(colors, variants) {
  if (variants === void 0) {
    variants = defaultAlphaVariants;
  }

  return generateAlphaVariants(colors, function (value, _, variant) {
    return "" + value + Math.round(variant / 100 * 255).toString(16);
  }, variants);
}
var defaultTones = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
function aliasColor(alias, color, tones, variants) {
  if (tones === void 0) {
    tones = defaultTones;
  }

  if (variants === void 0) {
    variants = defaultAlphaVariants;
  }

  return tones.reduce(function (obj, tone) {
    obj[alias + "-" + tone] = th.color(color + "-" + tone);
    variants.forEach(function (i) {
      obj[alias + "-" + tone + "-a" + i] = th.color(color + "-" + tone + "-a" + i);
    });
    return obj;
  }, {});
}

var space$1 = {
  0.5: '0.125rem',
  1: '0.25rem',
  1.5: '0.375rem',
  2: '0.5rem',
  2.5: '0.625rem',
  3: '0.75rem',
  3.5: '0.875rem',
  4: '1rem',
  5: '1.25rem',
  6: '1.5rem',
  7: '1.75rem',
  8: '2rem',
  9: '2.25rem',
  10: '2.5rem',
  11: '2.75rem',
  12: '3rem',
  14: '3.5rem',
  16: '4rem',
  20: '5rem',
  24: '6rem',
  28: '7rem',
  32: '8rem',
  36: '9rem',
  40: '10rem',
  44: '11rem',
  48: '12rem',
  52: '13rem',
  56: '14rem',
  60: '15rem',
  64: '16rem',
  72: '18rem',
  80: '20rem',
  96: '24rem'
};
var timingFunctions = {
  'ease-in': 'cubic-bezier(0.4, 0, 1, 1)',
  'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',
  'ease-in-out': 'cubic-bezier(0.4, 0, 0.2, 1)'
};
var transitionProperties = {
  "default": ['background-color', 'border-color', 'color', 'fill', 'stroke', 'opacity', 'box-shadow', 'transform'],
  colors: ['background-color', 'border-color', 'color', 'fill', 'stroke'],
  opacity: ['opacity'],
  shadow: ['box-shadow'],
  transform: ['transform']
};
var transitions$1 = /*#__PURE__*/Object.keys(transitionProperties).reduce(function (obj, key) {
  obj[key] = transitionProperties[key].map(function (property) {
    return property + " " + timingFunctions['ease-in-out'] + " 150ms";
  }).join(',');
  return obj;
}, {});
var colors = {
  black: '#000000',
  white: '#ffffff',
  'blue-gray-50': '#f8fafc',
  'blue-gray-100': '#f1f5f9',
  'blue-gray-200': '#e2e8f0',
  'blue-gray-300': '#cbd5e1',
  'blue-gray-400': '#94a3b8',
  'blue-gray-500': '#64748b',
  'blue-gray-600': '#475569',
  'blue-gray-700': '#334155',
  'blue-gray-800': '#1e293b',
  'blue-gray-900': '#0f172a',
  'cool-gray-50': '#f9fafb',
  'cool-gray-100': '#f3f4f6',
  'cool-gray-200': '#e5e7eb',
  'cool-gray-300': '#d1d5db',
  'cool-gray-400': '#9ca3af',
  'cool-gray-500': '#6b7280',
  'cool-gray-600': '#4b5563',
  'cool-gray-700': '#374151',
  'cool-gray-800': '#1f2937',
  'cool-gray-900': '#111827',
  'gray-50': '#fafafa',
  'gray-100': '#f4f4f5',
  'gray-200': '#e4e4e7',
  'gray-300': '#d4d4d8',
  'gray-400': '#a1a1aa',
  'gray-500': '#71717a',
  'gray-600': '#52525b',
  'gray-700': '#3f3f46',
  'gray-800': '#27272a',
  'gray-900': '#18181b',
  'true-gray-50': '#fafafa',
  'true-gray-100': '#f5f5f5',
  'true-gray-200': '#e5e5e5',
  'true-gray-300': '#d4d4d4',
  'true-gray-400': '#a3a3a3',
  'true-gray-500': '#737373',
  'true-gray-600': '#525252',
  'true-gray-700': '#404040',
  'true-gray-800': '#262626',
  'true-gray-900': '#171717',
  'warm-gray-50': '#fafaf9',
  'warm-gray-100': '#f5f5f4',
  'warm-gray-200': '#e7e5e4',
  'warm-gray-300': '#d6d3d1',
  'warm-gray-400': '#a8a29e',
  'warm-gray-500': '#78716c',
  'warm-gray-600': '#57534e',
  'warm-gray-700': '#44403c',
  'warm-gray-800': '#292524',
  'warm-gray-900': '#1c1917',
  'red-50': '#fef2f2',
  'red-100': '#fee2e2',
  'red-200': '#fecaca',
  'red-300': '#fca5a5',
  'red-400': '#f87171',
  'red-500': '#ef4444',
  'red-600': '#dc2626',
  'red-700': '#b91c1c',
  'red-800': '#991b1b',
  'red-900': '#7f1d1d',
  'orange-50': '#fff7ed',
  'orange-100': '#ffedd5',
  'orange-200': '#fed7aa',
  'orange-300': '#fdba74',
  'orange-400': '#fb923c',
  'orange-500': '#f97316',
  'orange-600': '#ea580c',
  'orange-700': '#c2410c',
  'orange-800': '#9a3412',
  'orange-900': '#7c2d12',
  'amber-50': '#fffbeb',
  'amber-100': '#fef3c7',
  'amber-200': '#fde68a',
  'amber-300': '#fcd34d',
  'amber-400': '#fbbf24',
  'amber-500': '#f59e0b',
  'amber-600': '#d97706',
  'amber-700': '#b45309',
  'amber-800': '#92400e',
  'amber-900': '#78350f',
  'yellow-50': '#fefce8',
  'yellow-100': '#fef9c3',
  'yellow-200': '#fef08a',
  'yellow-300': '#fde047',
  'yellow-400': '#facc15',
  'yellow-500': '#eab308',
  'yellow-600': '#ca8a04',
  'yellow-700': '#a16207',
  'yellow-800': '#854d0e',
  'yellow-900': '#713f12',
  'lime-50': '#f7fee7',
  'lime-100': '#ecfccb',
  'lime-200': '#d9f99d',
  'lime-300': '#bef264',
  'lime-400': '#a3e635',
  'lime-500': '#84cc16',
  'lime-600': '#65a30d',
  'lime-700': '#4d7c0f',
  'lime-800': '#3f6212',
  'lime-900': '#365314',
  'green-50': '#f0fdf4',
  'green-100': '#dcfce7',
  'green-200': '#bbf7d0',
  'green-300': '#86efac',
  'green-400': '#4ade80',
  'green-500': '#22c55e',
  'green-600': '#16a34a',
  'green-700': '#15803d',
  'green-800': '#166534',
  'green-900': '#14532d',
  'emerald-50': '#ecfdf5',
  'emerald-100': '#d1fae5',
  'emerald-200': '#a7f3d0',
  'emerald-300': '#6ee7b7',
  'emerald-400': '#34d399',
  'emerald-500': '#10b981',
  'emerald-600': '#059669',
  'emerald-700': '#047857',
  'emerald-800': '#065f46',
  'emerald-900': '#064e3b',
  'teal-50': '#f0fdfa',
  'teal-100': '#ccfbf1',
  'teal-200': '#99f6e4',
  'teal-300': '#5eead4',
  'teal-400': '#2dd4bf',
  'teal-500': '#14b8a6',
  'teal-600': '#0d9488',
  'teal-700': '#0f766e',
  'teal-800': '#115e59',
  'teal-900': '#134e4a',
  'cyan-50': '#ecfeff',
  'cyan-100': '#cffafe',
  'cyan-200': '#a5f3fc',
  'cyan-300': '#67e8f9',
  'cyan-400': '#22d3ee',
  'cyan-500': '#06b6d4',
  'cyan-600': '#0891b2',
  'cyan-700': '#0e7490',
  'cyan-800': '#155e75',
  'cyan-900': '#164e63',
  'light-blue-50': '#f0f9ff',
  'light-blue-100': '#e0f2fe',
  'light-blue-200': '#bae6fd',
  'light-blue-300': '#7dd3fc',
  'light-blue-400': '#38bdf8',
  'light-blue-500': '#0ea5e9',
  'light-blue-600': '#0284c7',
  'light-blue-700': '#0369a1',
  'light-blue-800': '#075985',
  'light-blue-900': '#0c4a6e',
  'blue-50': '#eff6ff',
  'blue-100': '#dbeafe',
  'blue-200': '#bfdbfe',
  'blue-300': '#93c5fd',
  'blue-400': '#60a5fa',
  'blue-500': '#3b82f6',
  'blue-600': '#2563eb',
  'blue-700': '#1d4ed8',
  'blue-800': '#1e40af',
  'blue-900': '#1e3a8a',
  'indigo-50': '#eef2ff',
  'indigo-100': '#e0e7ff',
  'indigo-200': '#c7d2fe',
  'indigo-300': '#a5b4fc',
  'indigo-400': '#818cf8',
  'indigo-500': '#6366f1',
  'indigo-600': '#4f46e5',
  'indigo-700': '#4338ca',
  'indigo-800': '#3730a3',
  'indigo-900': '#312e81',
  'violet-50': '#f5f3ff',
  'violet-100': '#ede9fe',
  'violet-200': '#ddd6fe',
  'violet-300': '#c4b5fd',
  'violet-400': '#a78bfa',
  'violet-500': '#8b5cf6',
  'violet-600': '#7c3aed',
  'violet-700': '#6d28d9',
  'violet-800': '#5b21b6',
  'violet-900': '#4c1d95',
  'purple-50': '#faf5ff',
  'purple-100': '#f3e8ff',
  'purple-200': '#e9d5ff',
  'purple-300': '#d8b4fe',
  'purple-400': '#c084fc',
  'purple-500': '#a855f7',
  'purple-600': '#9333ea',
  'purple-700': '#7e22ce',
  'purple-800': '#6b21a8',
  'purple-900': '#581c87',
  'fuchsia-50': '#fdf4ff',
  'fuchsia-100': '#fae8ff',
  'fuchsia-200': '#f5d0fe',
  'fuchsia-300': '#f0abfc',
  'fuchsia-400': '#e879f9',
  'fuchsia-500': '#d946ef',
  'fuchsia-600': '#c026d3',
  'fuchsia-700': '#a21caf',
  'fuchsia-800': '#86198f',
  'fuchsia-900': '#701a75',
  'pink-50': '#fdf2f8',
  'pink-100': '#fce7f3',
  'pink-200': '#fbcfe8',
  'pink-300': '#f9a8d4',
  'pink-400': '#f472b6',
  'pink-500': '#ec4899',
  'pink-600': '#db2777',
  'pink-700': '#be185d',
  'pink-800': '#9d174d',
  'pink-900': '#831843',
  'rose-50': '#fff1f2',
  'rose-100': '#ffe4e6',
  'rose-200': '#fecdd3',
  'rose-300': '#fda4af',
  'rose-400': '#fb7185',
  'rose-500': '#f43f5e',
  'rose-600': '#e11d48',
  'rose-700': '#be123c',
  'rose-800': '#9f1239',
  'rose-900': '#881337'
};
var defaultTheme = {
  colors: /*#__PURE__*/generateHexAlphaVariants(colors),
  space: space$1,
  screens: {
    _: 0,
    xs: 0,
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280,
    '2xl': 1536
  },
  durations: {
    instant: '100ms',
    'fast-in': '250ms',
    'fast-out': '200ms',
    'slow-in': '300ms',
    'slow-out': '250ms'
  },
  sizes: /*#__PURE__*/_extends({}, space$1, {
    0.5: undefined,
    1: undefined,
    '0.5s': space$1[0.5],
    '1s': space$1[1],
    full: '100%',
    xs: '20rem',
    sm: '24rem',
    md: '28rem',
    lg: '32rem',
    xl: '36rem',
    '2xl': '42rem',
    '3xl': '48rem',
    '4xl': '56rem',
    '5xl': '64rem',
    '6xl': '72rem',
    '7xl': '80rem'
  }),
  radii: {
    none: '0',
    sm: '0.125rem',
    "default": '0.25rem',
    md: '0.375rem',
    lg: '0.5rem',
    xl: '0.75rem',
    '2xl': '1rem',
    '3xl': '1.5rem',
    full: '9999px'
  },
  shadows: {
    xs: '0 0 0 1px rgba(0, 0, 0, 0.05)',
    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
    "default": '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
    '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
    inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
    outline: '0 0 0 3px rgba(66, 153, 225, 0.5)'
  },
  fontSizes: {
    xs: '0.75rem',
    sm: '0.875rem',
    "default": '1rem',
    lg: '1.125rem',
    xl: '1.25rem',
    '2xl': '1.5rem',
    '3xl': '1.875rem',
    '4xl': '2.25rem',
    '5xl': '3rem',
    '6xl': '3.75rem',
    '7xl': '4.5rem',
    '8xl': '6rem',
    '9xl': '8rem'
  },
  fontWeights: {
    hairline: '100',
    thin: '200',
    light: '300',
    normal: '400',
    medium: '500',
    semibold: '600',
    bold: '700',
    extrabold: '800',
    black: '900'
  },
  fonts: {
    mono: "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
    serif: "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
    sans: "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\""
  },
  letterSpacings: {
    tighter: '-0.05em',
    tight: '-0.025em',
    normal: '0em',
    wide: '0.025em',
    wider: '0.05em',
    widest: '0.1em'
  },
  lineHeights: {
    none: 1,
    tight: 1.25,
    snug: 1.375,
    normal: 1.5,
    relaxed: 1.625,
    loose: 2,
    3: '.75rem',
    4: '1rem',
    5: '1.25rem',
    6: '1.5rem',
    7: '1.75rem',
    8: '2rem',
    9: '2.25rem',
    10: '2.5rem'
  },
  gridTemplateColumns: {
    1: 'repeat(1, minmax(0, 1fr))',
    2: 'repeat(2, minmax(0, 1fr))',
    3: 'repeat(3, minmax(0, 1fr))',
    4: 'repeat(4, minmax(0, 1fr))',
    5: 'repeat(5, minmax(0, 1fr))',
    6: 'repeat(6, minmax(0, 1fr))',
    7: 'repeat(7, minmax(0, 1fr))',
    8: 'repeat(8, minmax(0, 1fr))',
    9: 'repeat(9, minmax(0, 1fr))',
    10: 'repeat(10, minmax(0, 1fr))',
    11: 'repeat(11, minmax(0, 1fr))',
    12: 'repeat(12, minmax(0, 1fr))'
  },
  gridTemplateRows: {
    1: 'repeat(1, minmax(0, 1fr))',
    2: 'repeat(2, minmax(0, 1fr))',
    3: 'repeat(3, minmax(0, 1fr))',
    4: 'repeat(4, minmax(0, 1fr))',
    5: 'repeat(5, minmax(0, 1fr))',
    6: 'repeat(6, minmax(0, 1fr))'
  },
  borderWidths: {
    "default": 1
  },
  ringWidths: {
    "default": 3
  },
  borders: {
    "default": '1px solid transparent'
  },
  transitions: transitions$1,
  transitionProperties: transitionProperties,
  timingFunctions: timingFunctions,
  animations: {
    spin: 'x-spin 1s linear infinite',
    ping: 'x-ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
    pulse: 'x-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
    bounce: 'x-bounce 1s infinite'
  }
};

var _templateObject;
var createPreflight = function createPreflight(_ref) {
  var createGlobalStyle = _ref.createGlobalStyle;
  return createGlobalStyle(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n    /*! modern-normalize v1.0.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\n    *,::after,::before{box-sizing:border-box}:root{-moz-tab-size:4;tab-size:4}html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}body{font-family:system-ui,-apple-system,'Segoe UI',Roboto,Helvetica,Arial,sans-serif,'Apple Color Emoji','Segoe UI Emoji'}hr{height:0;color:inherit}abbr[title]{text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Consolas,'Liberation Mono',Menlo,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}::-moz-focus-inner{border-style:none;padding:0}:-moz-focusring{outline:1px dotted ButtonText}:-moz-ui-invalid{box-shadow:none}legend{padding:0}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}\n\n    /* Role button pointer */\n    [role=button], button {\n      cursor: pointer;\n    }\n\n    /* Remove default margins */\n    blockquote,\n    dl,\n    dd,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    hr,\n    figure,\n    p,\n    pre {\n      margin: 0;\n    }\n\n    /* Remove headings styles */\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    /* Unstyle lists */\n    ol,\n    ul {\n      list-style: none;\n      margin: 0;\n      padding: 0;\n    }\n\n    /* Image are block-level */\n    img,\n    svg,\n    video,\n    canvas,\n    audio,\n    iframe,\n    embed,\n    object {\n      display: block;\n      vertical-align: middle;\n    }\n\n    /* Reset border styles */\n    *,\n    ::before,\n    ::after {\n      border-width: 0;\n      border-style: solid;\n      border-color: ", ";\n    }\n\n    * {\n      --x-ring-color: ", ";\n    }\n\n    /* Default outline on buttons */\n    button:focus {\n      outline: 1px dotted;\n      outline: 5px auto -webkit-focus-ring-color;\n    }\n\n    // Animations\n    @keyframes x-spin {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(360deg);\n      }\n    }\n\n    @keyframes x-ping {\n      0% {\n        transform: scale(1);\n        opacity: 1;\n      }\n      75%, 100% {\n        transform: scale(2);\n        opacity: 0;\n      }\n    }\n\n    @keyframes x-pulse {\n      0%, 100% {\n        opacity: 1;\n      }\n      50% {\n        opacity: .5;\n      }\n    }\n\n    @keyframes x-bounce {\n      0%, 100% {\n        transform: translateY(-25%);\n        animationTimingFunction: cubic-bezier(0.8, 0, 1, 1);\n      }\n      50% {\n        transform: translateY(0);\n        animationTimingFunction: cubic-bezier(0, 0, 0.2, 1);\n      }\n    }\n  "])), th.color('default-border-color', 'currentColor'), th.color('default-ring-color', 'rgba(59,130,246,0.5)'));
};

export { aliasColor, alignContent, alignItems, alignSelf, animation, animations, appearance, background, backgroundAttachment, backgroundClip, backgroundColor, backgroundImage, backgroundPosition, backgroundRepeat, backgroundSize, backgrounds, between, border, borderBottom, borderBottomColor, borderBottomWidth, borderCollapse, borderColor, borderLeft, borderLeftColor, borderLeftWidth, borderRadius, borderRight, borderRightColor, borderRightWidth, borderStyle, borderTop, borderTopColor, borderTopWidth, borderWidth, borders, bottom, boxShadow, boxSizing, breakpoints, col, color, columnGap, compose, container, createPreflight, createStyleGenerator, cursor, defaultTheme, display, divideColor, divideStyle, divideX, divideXReverse, divideY, divideYReverse, down, effects, fill, flex, flexBasis, flexDirection, flexGrow, flexShrink, flexWrap, flexboxGrids, flexboxes, _float as float, fontFamily, fontSize, fontStyle, fontWeight, gap, generateHexAlphaVariants, getAngle, getAnimation, getBorder, getBorderColor, getBorderStyle, getBorderWidth, getBreakpointMax, getBreakpointMin, getBreakpoints, getColor, getDuration, getFont, getFontSize, getFontWeight, getInset, getLetterSpacing, getLineHeight, getPercent, getPx, getRadius, getRingWidth, getShadow, getSize, getSpace, getTimingFunction, getTransform, getTransition, getTransitionProperty, getZIndex, gradientFrom, gradientTo, gradientVia, gridArea, gridAutoColumns, gridAutoFlow, gridAutoRows, gridColumn, gridRow, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, grids, height, interactivity, justifyContent, justifyItems, justifySelf, layout, left, letterSpacing, lineHeight, listStylePosition, listStyleType, margin, marginBottom, marginLeft, marginRight, marginTop, maxHeight, maxWidth, minHeight, minWidth, mx, my, objectFit, opacity, order, outline, outlineColor, outlineStyle, outlineWidth, overflow, overflowX, overflowY, overscrollBehavior, padding, paddingBottom, paddingLeft, paddingRight, paddingTop, pointerEvents, position, px$1 as px, py, resize, right, ring, ringColor, ringInset, rotate, row, rowGap, rpxTransformers, scale, scaleX, scaleY, sizing, skewX, skewY, space, spaceX, spaceXReverse, spaceY, spaceYReverse, stroke, style, svg, system, tableLayout, tables, textAlign, textDecoration, textOverflow, textShadow, textTransform, th, themeGetter, top, transform, transformOrigin, transforms, transition, transitionDelay, transitionDuration, transitionProperty, transitionTimingFunction, transitions, translateX, translateY, typography, up, userSelect, verticalAlign, visibility, whiteSpace, width, zIndex };
//# sourceMappingURL=system.esm.js.map
